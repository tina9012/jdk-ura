{
  "jdk-20": {
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipPath.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Path resolveSibling(String other);",
          "public boolean startsWith(String other);",
          "public boolean endsWith(String other);",
          "public File toFile();",
          "ZipFileAttributes readAttributesIfExists() throws IOException;",
          "boolean exists();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.compiler/share/classes/javax/lang/model/util/Elements.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "default boolean isCanonicalConstructor(ExecutableElement e);",
          "default boolean isCompactConstructor(ExecutableElement e);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static DiagnosticPosition diagnosticPositionFor(final Symbol sym, final JCTree tree, boolean returnNullIfNotFound, Predicate<? super JCTree> filter);",
          "protected boolean checkMatch(JCTree that, Symbol thatSym);",
          "public static JCPattern skipParens(JCPattern tree);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void setNormal();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public RecordComponent findRecordComponentToRemove(JCVariableDecl var);",
          "public RecordComponent createRecordComponent(RecordComponent existing, JCVariableDecl rcDecl, VarSymbol varSym);",
          "public RecordComponent(VarSymbol field, JCVariableDecl ast) {",
          "public RecordComponent(VarSymbol field, JCVariableDecl ast, boolean isVarargs) {",
          "public JCVariableDecl declarationFor();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/unix/classes/sun/nio/fs/UnixFileSystem.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "protected static class Flags {",
            "methods": [
              "static Flags fromCopyOptions(CopyOption... options);",
              "static Flags fromMoveOptions(CopyOption... options);",
              "int directCopy(int dst, int src, long addressToPollForCancel) throws UnixException;",
              "void bufferedCopy(int dst, int src, long address, int size, long addressToPollForCancel) throws UnixException;",
              "void copyFile(UnixPath source, UnixFileAttributes attrs, UnixPath target, Flags flags, long addressToPollForCancel) throws IOException;",
              "static void ensureEmptyDir(UnixPath dir) throws IOException;",
              "void move(UnixPath source, UnixPath target, CopyOption... options) throws IOException;",
              "void copy(final UnixPath source, final UnixPath target, CopyOption... options) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "boolean isCaseInsensitiveAndPreserving();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/net/www/HeaderParser.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public OptionalInt findInt(String k);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/net/www/protocol/https/HttpsClient.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void closeServer();",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "HttpClient put(HttpClient h);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/util/ObjectIdentifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/util/DerValue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void encode(DerOutputStream out);",
          "public byte[] getDataBytes();",
          "public byte[] toByteArray();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void process(Hashtable<String, CodeSigner[]> signers, List<Object> manifestDigests, String manifestName) throws IOException, SignatureException, NoSuchAlgorithmException, CertificateException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/provider/certpath/ResponderId.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public enum Type {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/X500Name.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/GeneralSubtrees.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class GeneralSubtrees implements Cloneable, DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/CRLExtensions.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void encode(DerOutputStream out, boolean isExplicit);",
          "public Extension getExtension(String alias);",
          "public void setExtension(String alias, Extension ext);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/Extension.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Extension implements java.security.cert.Extension, DerEncoder {",
            "methods": [
              "@Override",
              "public final void encode(OutputStream out) throws IOException;",
              "@Override",
              "public void encode(DerOutputStream out);",
              "public String getName();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/GeneralNames.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/URIName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/DNSName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/X509Key.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class X509Key implements PublicKey, DerEncoder {",
            "methods": [
              "protected void parseKeyBits() throws InvalidKeyException;",
              "@Override",
              "public final void encode(DerOutputStream out);",
              "public byte[] getEncodedInternal();",
              "public byte[] encode();",
              "static void encode(DerOutputStream out, AlgorithmId algid, BitArray key);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/GeneralName.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class GeneralName implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/X509CertInfo.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class X509CertInfo {",
            "methods": [
              "public void encode(DerOutputStream out) throws CertificateException;",
              "public CertificateExtensions getExtensions();",
              "public UniqueIdentity getIssuerUniqueId();",
              "public UniqueIdentity getSubjectUniqueId();",
              "public X500Name getIssuer();",
              "public X500Name getSubject();",
              "public void setVersion(CertificateVersion val);",
              "public CertificateVersion getVersion();",
              "public void setSerialNumber(CertificateSerialNumber val);",
              "public CertificateSerialNumber getSerialNumber();",
              "public void setAlgorithmId(CertificateAlgorithmId val);",
              "public CertificateAlgorithmId getAlgorithmId();",
              "public void setIssuer(X500Name val);",
              "public void setValidity(CertificateValidity val);",
              "public CertificateValidity getValidity();",
              "public void setSubject(X500Name val) throws CertificateException;",
              "public void setKey(CertificateX509Key val);",
              "public CertificateX509Key getKey();",
              "public void setIssuerUniqueId(UniqueIdentity val) throws CertificateException;",
              "public void setSubjectUniqueId(UniqueIdentity val) throws CertificateException;",
              "public void setExtensions(CertificateExtensions val) throws CertificateException;"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/IPAddressName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/OIDName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/AVA.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/KeyIdentifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/EDIPartyName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/PolicyInformation.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class PolicyInformation implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/OtherName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/RDN.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/CertificatePolicyId.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class CertificatePolicyId implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/DistributionPointName.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class DistributionPointName implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/CertificateExtensions.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class CertificateExtensions implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);",
              "public void encode(DerOutputStream out, boolean isCertReq);",
              "public void setExtension(String name, Extension ext);",
              "public Extension getExtension(String alias);",
              "public String getNameByOid(ObjectIdentifier oid);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/RFC822Name.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/DistributionPoint.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class DistributionPoint implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/GeneralSubtree.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class GeneralSubtree implements DerEncoder {",
            "methods": [
              "@Override",
              "public void encode(DerOutputStream out);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/AccessDescription.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/x509/AlgorithmId.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);",
          "public final byte[] encode();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/pkcs10/PKCS10.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void encodeAndSign(X500Name subject, PrivateKey key, String algorithm) throws SignatureException, NoSuchAlgorithmException, InvalidKeyException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/pkcs10/PKCS10Attributes.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void encode(DerOutputStream out);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/security/pkcs/EncryptedPrivateKeyInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public byte[] getEncoded();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public MemorySegment map(MapMode mode, long offset, long size, SegmentScope session) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/sun/nio/ch/FileDispatcher.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "abstract long allocationGranularity();",
          "abstract long map(FileDescriptor fd, int prot, long position, long length, boolean isSync) throws IOException;",
          "abstract int unmap(long address, long length);",
          "abstract int maxDirectTransferSize();",
          "abstract long transferTo(FileDescriptor src, long position, long count, FileDescriptor dst, boolean append);",
          "abstract long transferFrom(FileDescriptor src, FileDescriptor dst, long position, long count, boolean append);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/jdk/internal/module/ModuleReferenceImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "private record CachedHash(byte[] hash, String algorithm) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/net/URL.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Deprecated()",
          "@Deprecated()",
          "@Deprecated()",
          "@Deprecated()",
          "@Deprecated()",
          "@Deprecated()",
          "public static URL of(URI uri, URLStreamHandler handler) throws MalformedURLException;",
          "static String lowerCaseProtocol(String protocol);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/IdentityHashMap.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean remove(Object key, Object value);",
          "@Override",
          "public boolean replace(K key, V oldValue, V newValue);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/stream/Collectors.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "record CollectorImpl<T, A, R>(Supplier<A> supplier, BiConsumer<A, T> accumulator, BinaryOperator<A> combiner, Function<A, R> finisher, Set<Characteristics> characteristics) implements Collector<T, A, R> {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/jar/JarVerifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Certificate[] getCerts(JarEntry entry);",
          "public CodeSigner[] getCodeSigners(JarEntry entry);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/regex/Matcher.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public Map<String, Integer> namedGroups();",
          "@Override",
          "public boolean hasMatch();",
          "@Override",
          "public Map<String, Integer> namedGroups();",
          "@Override",
          "public boolean hasMatch();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/regex/Pattern.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Map<String, Integer> namedGroups();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/regex/MatchResult.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "int start();",
          "int start(int group);",
          "default int start(String name);",
          "int end();",
          "int end(int group);",
          "default int end(String name);",
          "String group();",
          "String group(int group);",
          "@Nullable",
          "default String group(String name);",
          "int groupCount();",
          "default Map<String, Integer> namedGroups();",
          "private int groupNumber(String name);",
          "default boolean hasMatch();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/zip/Inflater.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean hasPendingOutput();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/zip/ZipInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public int read() throws IOException;",
          "@Override",
          "public byte[] readAllBytes() throws IOException;",
          "@Override",
          "public byte[] readNBytes(int len) throws IOException;",
          "@Override",
          "public int readNBytes(byte[] b, int off, int len) throws IOException;",
          "@Override",
          "public void skipNBytes(long n) throws IOException;",
          "@Override",
          "public long transferTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/util/concurrent/ForkJoinPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public <T> ForkJoinTask<T> externalSubmit(ForkJoinTask<T> task);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/KeyRep.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public enum Type {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/UnresolvedPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/Security.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class Criteria {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/Principal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean equals(@Nullable Object another);",
          "String toString();",
          "int hashCode();",
          "String getName();",
          "default boolean implies(Subject subject);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/SecureClassLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "private record CodeSourceKey(CodeSource cs) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/Key.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "long serialVersionUID;",
          "String getAlgorithm();",
          "String getFormat();",
          "byte @Nullable [] getEncoded();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/KeyStore.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public interface LoadStoreParameter {",
          "ProtectionParameter getProtectionParameter();",
          "public interface ProtectionParameter {",
          "public interface Entry {",
          "default Set<Attribute> getAttributes();",
          "interface Attribute {",
          "String getName();",
          "String getValue();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/cert/CertStore.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static String getDefaultType();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/security/interfaces/ECPrivateKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "long serialVersionUID;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/io/SequenceInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public long transferTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/io/PushbackInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public long transferTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/io/BufferedInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public long transferTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/io/Console.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Console implements Flushable {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/math/BigInteger.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static void putSignAndMag(BigInteger bi, int sign, int[] magnitude);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/math/BigDecimal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static void setIntValAndScale(BigDecimal bd, BigInteger intVal, int scale);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Integer.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@IntrinsicCandidate",
          "@IntrinsicCandidate"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/StackTraceElement.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Float.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@IntrinsicCandidate",
          "@IntrinsicCandidate",
          "public static float float16ToFloat(short floatBinary16);",
          "@IntrinsicCandidate",
          "public static short floatToFloat16(float f);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Long.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@IntrinsicCandidate",
          "@IntrinsicCandidate"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Class.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Set<AccessFlag> accessFlags();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/String.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static int checkBoundsOffCount(int offset, int count, int length);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Character.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final UnicodeBlock ARABIC_EXTENDED_C;",
          "public static final UnicodeBlock DEVANAGARI_EXTENDED_A;",
          "public static final UnicodeBlock KAWI;",
          "public static final UnicodeBlock KAKTOVIK_NUMERALS;",
          "public static final UnicodeBlock CYRILLIC_EXTENDED_D;",
          "public static final UnicodeBlock NAG_MUNDARI;",
          "public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_H;",
          "KAWI,",
          "NAG_MUNDARI,"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/ThreadLocal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean isCarrierThreadLocalPresent();",
          "void removeCarrierThreadLocal();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Double.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@IntrinsicCandidate"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/Thread.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static Object scopedValueBindings();",
          "static void setScopedValueBindings(Object bindings);",
          "@IntrinsicCandidate",
          "static native Object findScopedValueBindings();",
          "void inheritScopedValueBindings(ThreadContainer container);",
          "static native Object[] scopedValueCache();",
          "static native void setScopedValueCache(Object[] cache);",
          "@IntrinsicCandidate",
          "static native void ensureMaterializedForStackWalk(Object o);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/invoke/LambdaForm.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "String debugString(int indentLevel);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/module/ModuleDescriptor.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "OPEN(AccessFlag.OPEN.mask()), AUTOMATIC(0), SYNTHETIC(AccessFlag.SYNTHETIC.mask()), MANDATED(AccessFlag.MANDATED.mask())",
          "TRANSITIVE(AccessFlag.TRANSITIVE.mask()), STATIC(AccessFlag.STATIC_PHASE.mask()), SYNTHETIC(AccessFlag.SYNTHETIC.mask()), MANDATED(AccessFlag.MANDATED.mask())",
          "public Set<AccessFlag> accessFlags();",
          "SYNTHETIC(AccessFlag.SYNTHETIC.mask()), MANDATED(AccessFlag.MANDATED.mask())",
          "public Set<AccessFlag> accessFlags();",
          "SYNTHETIC(AccessFlag.SYNTHETIC.mask()), MANDATED(AccessFlag.MANDATED.mask())",
          "public Set<AccessFlag> accessFlags();",
          "public Set<AccessFlag> accessFlags();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/reflect/Parameter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Set<AccessFlag> accessFlags();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/reflect/Executable.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public Set<AccessFlag> accessFlags();",
          "public abstract int getParameterCount();",
          "record ParameterData(@Stable Parameter[] parameters, boolean isReal) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/reflect/Proxy.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "if (!module.isOpen(packageName, Proxy.class.getModule())) {",
            "methods": []
          },
          {
            "declaration": "throw new InternalError(packageName + \" not open to \" + Proxy.class.getModule());",
            "methods": [
              "if (Modifier.isPublic(accessFlags)) {",
              "throw new InternalError(\"public proxy in unnamed module: \" + module);",
              "if ((accessFlags & ~Modifier.PUBLIC) != 0) {",
              "throw new InternalError(\"proxy access flags must be Modifier.PUBLIC or 0\");"
            ]
          }
        ],
        "new_methods": [
          "private record ProxyClassContext(Module module, String packageName, int accessFlags) {",
          "private ProxyClassContext {",
          "if (module.isNamed()) {",
          "if (packageName.isEmpty()) {",
          "throw new InternalError(\"Unnamed package cannot be added to \" + module);",
          "if (!module.getDescriptor().packages().contains(packageName)) {",
          "throw new InternalError(packageName + \" not exist in \" + module.getName());"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/lang/reflect/Field.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public Set<AccessFlag> accessFlags();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/nio/file/spi/FileSystemProvider.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean exists(Path path, LinkOption... options);",
          "public <A extends BasicFileAttributes> A readAttributesIfExists(Path path, Class<A> type, LinkOption... options) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/nio/channels/FileChannel.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public MemorySegment map(MapMode mode, long offset, long size, SegmentScope session) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/text/RBCollationTables.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static void reverse(StringBuilder result, int from, int to);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.base/share/classes/java/text/PatternEntry.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void addToBuilder(StringBuilder toAddTo, boolean showExtension, boolean showWhiteSpace, PatternEntry lastEntry);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.net.http/share/classes/jdk/internal/net/http/ConnectionPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static CacheKey cacheKey(boolean secure, InetSocketAddress destination, InetSocketAddress proxy);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.sql.rowset/share/classes/javax/sql/rowset/serial/SerialDatalink.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"deprecation\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.naming/share/classes/javax/naming/spi/NamingManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static void setObjectFactoryBuilder(ObjectFactoryBuilder builder) throws NamingException;",
          "static ObjectFactoryBuilder getObjectFactoryBuilder();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public TagletWriterImpl getTagletWriterInstance(TagletWriterImpl.Context context);",
          "public Content getPackageLink(PackageElement packageElement, Content label, String fragment);",
          "public Content getModuleLink(ModuleElement mdle, Content label, String fragment);",
          "public URI resolveExternalSpecURI(URI specURI);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriterImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void addIndirectPackages(Table<?> table, Map<ModuleElement, SortedSet<PackageElement>> ip);",
          "public void addUsesList(Table<?> table);",
          "public void addProvidesList(Table<?> table);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlConfiguration.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "EXTERNAL_SPECS,"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/TextBuilder.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Text.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static int charCount(CharSequence cs);",
          "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;",
          "public static final String NL;",
          "public static CharSequence normalizeNewlines(CharSequence text);",
          "static boolean checkNewlines(CharSequence cs);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Comment.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/HtmlTree.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static HtmlTree DETAILS();",
          "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/RawHtml.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "protected final String rawHtmlContent;",
          "public static RawHtml of(CharSequence rawHtml);",
          "public static RawHtml startElement(CharSequence name, Content attrs, boolean selfClosing);",
          "public static RawHtml endElement(CharSequence name);",
          "public static RawHtml comment(String body);",
          "public static RawHtml cdata(String body);",
          "protected static int charCount(CharSequence htmlText);",
          "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/ContentBuilder.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean write(Writer writer, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Script.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean write(Writer writer, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/WorkArounds.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Map<? extends ExecutableElement, ? extends AnnotationValue> getJepInfo(String feature);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/Content.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public abstract boolean write(Writer writer, String newline, boolean atNewline) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public String getReferencedFragment(String signature);",
          "public Element getReferencedElement(DocTree dtree);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Pure",
          "@Pure",
          "public Object getPreviewFeature(Element e);",
          "@Pure",
          "@Pure",
          "@Pure",
          "@Pure",
          "public List<? extends SpecTree> getSpecTrees(Element element);",
          "@Pure",
          "@Pure",
          "public DocFinder docFinder();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/SimpleTaglet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Output inherit(Element owner, DocTree tag, boolean isFirstSentence, BaseConfiguration configuration);",
          "record Documentation(DocTree tag, List<? extends DocTree> description, ExecutableElement method) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.jlink/share/classes/jdk/tools/jmod/JmodOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compressLevel) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.desktop/share/classes/sun/font/AttributeValues.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")",
          "public static float getTracking(Map<?, ?> map);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.desktop/share/classes/javax/swing/AbstractButton.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void setMultiClickThreshhold(long threshold);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/java.desktop/share/classes/javax/swing/text/DefaultEditorKit.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static class EndLineDownAction extends TextAction {",
            "methods": [
              "@SuppressWarnings(\"deprecation\")",
              "public void actionPerformed(ActionEvent e);",
              "@SuppressWarnings(\"serial\")"
            ]
          },
          {
            "declaration": "static class BeginLineUpAction extends TextAction {",
            "methods": [
              "@SuppressWarnings(\"deprecation\")",
              "public void actionPerformed(ActionEvent e);",
              "@SuppressWarnings(\"serial\")"
            ]
          }
        ],
        "new_methods": [
          "public static final String beginLineUpAction;",
          "public static final String endLineDownAction;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaFieldImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public JavaConstant getConstantValue();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "long getMethodPointer();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.meta/src/jdk/vm/ci/meta/PrimitiveConstant.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public long getRawValue();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.meta/src/jdk/vm/ci/meta/Assumptions.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public String toString();",
          "public final ResolvedJavaType receiverType;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.code/src/jdk/vm/ci/code/RegisterSaveLayout.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public int size();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.code/src/jdk/vm/ci/code/BytecodeFrame.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void verifyInvariants();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-20/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.code/src/jdk/vm/ci/code/StackLockValue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public AllocatableValue getSlot();"
        ]
      }
    }
  }
}