{
  "jdk-21": {
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.compiler/share/classes/javax/lang/model/element/TypeElement.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@PreviewFeature(feature = PreviewFeature.Feature.UNNAMED_CLASSES, reflective = true)",
          "default boolean isUnnamed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Utility.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void write(final char[] cbuf, final int off, final int len) throws IOException;",
          "public void write(final int b) throws IOException;",
          "public static String accessToString(final int accessFlags);",
          "public static String accessToString(final int accessFlags, final boolean forClass);",
          "public static String classOrInterface(final int accessFlags);",
          "public static int clearBit(final int flag, final int i);",
          "public static String codeToString(final byte[] code, final ConstantPool constantPool, final int index, final int length);",
          "public static String codeToString(final byte[] code, final ConstantPool constantPool, final int index, final int length, final boolean verbose);",
          "public static String codeToString(final ByteSequence bytes, final ConstantPool constantPool) throws IOException;",
          "@SuppressWarnings(\"fallthrough\")",
          "public static String codeToString(final ByteSequence bytes, final ConstantPool constantPool, final boolean verbose) throws IOException;",
          "public static String compactClassName(final String str);",
          "public static String compactClassName(final String str, final boolean chopit);",
          "public static String compactClassName(String str, final String prefix, final boolean chopit);",
          "public static byte[] decode(final String s, final boolean uncompress) throws IOException;",
          "public static String encode(byte[] bytes, final boolean compress) throws IOException;",
          "public static String fillup(final String str, final int length, final boolean leftJustify, final char fill);",
          "public static String format(final int i, final int length, final boolean leftJustify, final char fill);",
          "public static String getSignature(String type);",
          "public static boolean isJavaIdentifierPart(final char ch);",
          "public static boolean isSet(final int flag, final int i);",
          "public static String[] methodSignatureArgumentTypes(final String signature) throws ClassFormatException;",
          "public static String[] methodSignatureArgumentTypes(final String signature, final boolean chopit) throws ClassFormatException;",
          "public static String methodSignatureReturnType(final String signature) throws ClassFormatException;",
          "public static String methodSignatureReturnType(final String signature, final boolean chopit) throws ClassFormatException;",
          "public static String methodSignatureToString(final String signature, final String name, final String access);",
          "public static String methodSignatureToString(final String signature, final String name, final String access, final boolean chopit);",
          "public static String methodSignatureToString(final String signature, final String name, final String access, final boolean chopit, final LocalVariableTable vars) throws ClassFormatException;",
          "public static String methodTypeToSignature(final String ret, final String[] argv) throws ClassFormatException;",
          "public static String packageToPath(final String name);",
          "public static String pathToPackage(final String str);",
          "public static String printArray(final Object[] obj);",
          "public static String printArray(final Object[] obj, final boolean braces);",
          "public static String printArray(final Object[] obj, final boolean braces, final boolean quote);",
          "public static void printArray(final PrintStream out, final Object[] obj);",
          "public static void printArray(final PrintWriter out, final Object[] obj);",
          "public static String replace(String str, final String old, final String new_);",
          "public static short searchOpcode(String name);",
          "public static int setBit(final int flag, final int i);",
          "public static String signatureToString(final String signature);",
          "public static String signatureToString(final String signature, final boolean chopit);",
          "public static String toHexString(final byte[] bytes);",
          "public static byte typeOfMethodSignature(final String signature) throws ClassFormatException;",
          "public static byte typeOfSignature(final String signature) throws ClassFormatException;",
          "public static String typeSignatureToString(final String signature, final boolean chopit) throws ClassFormatException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/Select.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Deprecated",
          "protected int[] match;",
          "@Deprecated",
          "protected int[] indices;",
          "@Deprecated",
          "protected InstructionHandle[] targets;",
          "@Deprecated",
          "protected int fixed_length;",
          "@Deprecated",
          "protected int match_length;",
          "@Deprecated",
          "protected int padding;",
          "protected Object clone() throws CloneNotSupportedException;",
          "void dispose();",
          "public void dump(final DataOutputStream out) throws IOException;",
          "final int getFixedLength();",
          "public int[] getIndices();",
          "final int getIndices(final int index);",
          "final int getMatch(final int index);",
          "final int getMatchLength();",
          "final int getPadding();",
          "final InstructionHandle getTarget(final int index);",
          "@Override",
          "protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException;",
          "final void setFixedLength(final int fixedLength);",
          "final int setIndices(final int i, final int value);",
          "final void setIndices(final int[] array);",
          "final void setMatches(final int[] array);",
          "final int setMatchLength(final int matchLength);",
          "public void setTarget(final int i, final InstructionHandle target);",
          "@Override",
          "public String toString(final boolean verbose);",
          "@Override",
          "protected int updatePosition(final int offset, final int maxOffset);",
          "@Override",
          "public void updateTarget(final InstructionHandle oldIh, final InstructionHandle newIh);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/InstructionList.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static InstructionHandle findHandle(final InstructionHandle[] ihs, final int[] pos, final int count, final int target);",
          "public InstructionList(final BranchInstruction i) {",
          "public InstructionList(final byte[] code) {",
          "public InstructionList(final CompoundInstruction c) {",
          "public void addObserver(final InstructionListObserver o);",
          "public BranchHandle append(final BranchInstruction i);",
          "public InstructionHandle append(final CompoundInstruction c);",
          "public InstructionHandle append(final Instruction i);",
          "public InstructionHandle append(final Instruction i, final CompoundInstruction c);",
          "public InstructionHandle append(final Instruction i, final Instruction j);",
          "public BranchHandle append(final InstructionHandle ih, final BranchInstruction i);",
          "public InstructionHandle append(final InstructionHandle ih, final InstructionList il);",
          "public InstructionHandle append(final InstructionList il);",
          "@Pure",
          "public boolean contains(final Instruction i);",
          "@Pure",
          "public boolean contains(final InstructionHandle i);",
          "public InstructionList copy();",
          "public void delete(final Instruction i) throws TargetLostException;",
          "public void delete(final Instruction from, final Instruction to) throws TargetLostException;",
          "public void delete(final InstructionHandle ih) throws TargetLostException;",
          "public void delete(final InstructionHandle from, final InstructionHandle to) throws TargetLostException;",
          "public void dispose();",
          "public InstructionHandle findHandle(final int pos);",
          "public byte[] getByteCode();",
          "public InstructionHandle getEnd();",
          "public InstructionHandle[] getInstructionHandles();",
          "public int[] getInstructionPositions();",
          "public Instruction[] getInstructions();",
          "public int getLength();",
          "public InstructionHandle getStart();",
          "public BranchHandle insert(final BranchInstruction i);",
          "public InstructionHandle insert(final CompoundInstruction c);",
          "public InstructionHandle insert(final Instruction i);",
          "public InstructionHandle insert(final Instruction i, final CompoundInstruction c);",
          "public InstructionHandle insert(final Instruction i, final Instruction j);",
          "public InstructionHandle insert(final Instruction i, final InstructionList il);",
          "public BranchHandle insert(final InstructionHandle ih, final BranchInstruction i);",
          "public InstructionHandle insert(final InstructionHandle ih, final CompoundInstruction c);",
          "public InstructionHandle insert(final InstructionHandle ih, final Instruction i);",
          "public boolean isEmpty();",
          "@Override",
          "public Iterator<InstructionHandle> iterator();",
          "public void move(final InstructionHandle ih, final InstructionHandle target);",
          "public void redirectBranches(final InstructionHandle oldTarget, final InstructionHandle newTarget);",
          "public void redirectExceptionHandlers(final CodeExceptionGen[] exceptions, final InstructionHandle oldTarget, final InstructionHandle newTarget);",
          "public void redirectLocalVariables(final LocalVariableGen[] lg, final InstructionHandle oldTarget, final InstructionHandle newTarget);",
          "public void removeObserver(final InstructionListObserver o);",
          "public void replaceConstantPool(final ConstantPoolGen oldCp, final ConstantPoolGen newCp);",
          "public int size();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/InstructionTargeter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void updateTarget(InstructionHandle oldIh, InstructionHandle newIh) throws ClassGenException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/LineNumberGen.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public LineNumberGen(final InstructionHandle ih, final int srcLine) {",
          "@Override",
          "public Object clone();",
          "public InstructionHandle getInstruction();",
          "public int getSourceLine();",
          "public void setSourceLine(final int srcLine);",
          "public void updateTarget(final InstructionHandle oldIh, final InstructionHandle newIh);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/CodeExceptionGen.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Object clone();",
          "public CodeException getCodeException(final ConstantPoolGen cp);",
          "public InstructionHandle getStartPC();",
          "public void setCatchType(final ObjectType catchType);",
          "public void setEndPC(final InstructionHandle endPc);",
          "public void setHandlerPC(final InstructionHandle handlerPc);",
          "public void setStartPC(final InstructionHandle startPc);",
          "public void updateTarget(final InstructionHandle oldIh, final InstructionHandle newIh);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/LocalVariableGen.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public Object clone();",
          "@Override",
          "@Pure",
          "public boolean containsTarget(final InstructionHandle ih);",
          "void dispose();",
          "@Override",
          "public boolean equals(final Object o);",
          "public InstructionHandle getEnd();",
          "public int getIndex();",
          "public boolean getLiveToEnd();",
          "@Override",
          "public String getName();",
          "public int getOrigIndex();",
          "public InstructionHandle getStart();",
          "@Override",
          "public Type getType();",
          "@Override",
          "public int hashCode();",
          "public void setEnd(final InstructionHandle end);",
          "public void setLiveToEnd(final boolean liveToEnd);",
          "public void setStart(final InstructionHandle start);",
          "public void updateTarget(final InstructionHandle oldIh, final InstructionHandle newIh);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BranchInstruction.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static void notifyTarget(final InstructionHandle oldIh, final InstructionHandle newIh, final InstructionTargeter t);",
          "@Deprecated",
          "protected int index;",
          "@Deprecated",
          "protected InstructionHandle target;",
          "@Deprecated",
          "protected int position;",
          "void dispose();",
          "public void dump(final DataOutputStream out) throws IOException;",
          "public final int getIndex();",
          "public InstructionHandle getTarget();",
          "protected int getTargetOffset();",
          "protected int getTargetOffset(final InstructionHandle target);",
          "@Override",
          "protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException;",
          "protected void setIndex(final int index);",
          "@Override",
          "void setOpcode(final short opcode);",
          "public void setTarget(final InstructionHandle target);",
          "@Override",
          "public String toString(final boolean verbose);",
          "protected int updatePosition(final int offset, final int maxOffset);",
          "@Override",
          "public void updateTarget(final InstructionHandle oldIh, final InstructionHandle newIh);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/ClassGen.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static BCELComparator getComparator();",
          "public static void setComparator(final BCELComparator comparator);",
          "public ClassGen(final JavaClass clazz) {",
          "public ClassGen(final String className, final String superClassName, final String fileName, final int accessFlags, final String[] interfaces, final ConstantPoolGen cp) {",
          "public void addAnnotationEntry(final AnnotationEntryGen a);",
          "public void addAttribute(final Attribute a);",
          "public void addEmptyConstructor(final int accessFlags);",
          "public void addField(final Field f);",
          "public void addObserver(final ClassObserver o);",
          "@Override",
          "public Object clone();",
          "@Pure",
          "@Override",
          "public boolean equals(final Object obj);",
          "public AnnotationEntryGen[] getAnnotationEntries();",
          "public Attribute[] getAttributes();",
          "public int getClassNameIndex();",
          "public ConstantPoolGen getConstantPool();",
          "public Field[] getFields();",
          "public JavaClass getJavaClass();",
          "public int getMajor();",
          "public Method getMethodAt(final int pos);",
          "public Method[] getMethods();",
          "public int getMinor();",
          "public String getSuperclassName();",
          "@Override",
          "public int hashCode();",
          "public void removeAttribute(final Attribute a);",
          "public void removeField(final Field f);",
          "public void removeInterface(final String name);",
          "public void removeMethod(final Method m);",
          "public void replaceField(final Field old, final Field newField);",
          "public void replaceMethod(final Method old, final Method newMethod);",
          "public void setClassName(final String name);",
          "public void setClassNameIndex(final int classNameIndex);",
          "public void setConstantPool(final ConstantPoolGen constantPool);",
          "public void setMajor(final int major);",
          "public void setMethodAt(final Method method, final int pos);",
          "public void setMethods(final Method[] methods);",
          "public void setMinor(final int minor);",
          "public void setSuperclassName(final String name);",
          "public void setSuperclassNameIndex(final int superclassNameIndex);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static boolean unguardedCase(JCCase cse);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "protected final List<TypeMetadata> metadata;",
          "public Type(TypeSymbol tsym, List<TypeMetadata> metadata) {",
          "protected Type cloneWithMetadata(List<TypeMetadata> metadata);",
          "public List<TypeMetadata> getMetadata();",
          "@SuppressWarnings(\"unchecked\")",
          "public <M extends TypeMetadata> M getMetadata(Class<M> metadataClass);",
          "@SuppressWarnings(\"unchecked\")",
          "public <M extends TypeMetadata, Z> Z getMetadata(Class<M> metadataClass, Function<M, Z> metadataFunc, Z defaultValue);",
          "public Type addMetadata(TypeMetadata md);",
          "public Type dropMetadata(Class<? extends TypeMetadata> metadataClass);",
          "public Type preannotatedType();",
          "protected JCPrimitiveType cloneWithMetadata(List<TypeMetadata> md);",
          "public WildcardType(Type type, BoundKind kind, TypeSymbol tsym, List<TypeMetadata> metadata) {",
          "public WildcardType(Type type, BoundKind kind, TypeSymbol tsym, TypeVar bound, List<TypeMetadata> metadata) {",
          "protected WildcardType cloneWithMetadata(List<TypeMetadata> md);",
          "public ClassType(Type outer, List<Type> typarams, TypeSymbol tsym, List<TypeMetadata> metadata) {",
          "protected ClassType cloneWithMetadata(List<TypeMetadata> md);",
          "public ErasedClassType(Type outer, TypeSymbol tsym, List<TypeMetadata> metadata) {",
          "public ArrayType(Type elemtype, TypeSymbol arrayClass, List<TypeMetadata> metadata) {",
          "protected ArrayType cloneWithMetadata(List<TypeMetadata> md);",
          "@SuppressWarnings(\"this-escape\")",
          "@SuppressWarnings(\"this-escape\")",
          "public TypeVar(TypeSymbol tsym, Type bound, Type lower, List<TypeMetadata> metadata) {",
          "protected TypeVar cloneWithMetadata(List<TypeMetadata> md);",
          "@SuppressWarnings(\"this-escape\")",
          "public CapturedType(TypeSymbol tsym, Type bound, Type upper, Type lower, WildcardType wildcard, List<TypeMetadata> metadata) {",
          "protected CapturedType cloneWithMetadata(List<TypeMetadata> md);",
          "public DelegatedType(TypeTag tag, Type qtype, List<TypeMetadata> metadata) {",
          "@SuppressWarnings(\"this-escape\")",
          "protected ErrorType cloneWithMetadata(List<TypeMetadata> md);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/code/DeferredCompletionFailureHandler.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")",
          "@SuppressWarnings(\"this-escape\")",
          "@SuppressWarnings(\"preview\")",
          "@Override",
          "@CanonicalName",
          "public Name getSimpleName();",
          "@Override",
          "@DefinedBy(Api.LANGUAGE_MODEL)",
          "@Override",
          "@DefinedBy(Api.LANGUAGE_MODEL)",
          "public boolean isUnnamed();",
          "@SuppressWarnings(\"preview\")",
          "public boolean isUnnamedVariable();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/tools/javac/model/JavacTypes.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"this-escape\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.compiler/share/classes/com/sun/source/tree/Tree.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "TEMPLATE(StringTemplateTree.class),",
            "methods": []
          },
          {
            "declaration": "ANY_PATTERN(AnyPatternTree.class),",
            "methods": []
          }
        ],
        "new_methods": [
          "@PreviewFeature(feature = PreviewFeature.Feature.STRING_TEMPLATES, reflective = true)",
          "@PreviewFeature(feature = PreviewFeature.Feature.UNNAMED)"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static final class P11PBEKey extends P11SecretKey implements PBEKey {",
            "methods": [
              "@Override",
              "public char[] getPassword();",
              "@Override",
              "public byte[] getSalt();",
              "@Override",
              "public int getIterationCount();",
              "void clearPassword();"
            ]
          }
        ],
        "new_methods": [
          "static SecretKey pbeKey(Session session, long keyID, String algorithm, int keyLength, CK_ATTRIBUTE[] attrs, char[] password, byte[] salt, int iterationCount);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/wrapper/Functions.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static int getLength(byte[] value);",
          "public static String getPrfName(long id);",
          "public static long getPrfId(String name);",
          "public static String getParamSourcesName(long id);",
          "public static long getParamSourcesId(String name);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.logging/share/classes/java/util/logging/Handler.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean tryUseLock();",
          "void unlock();",
          "public void setFormatter(Formatter newFormatter) throws SecurityException;",
          "public void setEncoding(@Nullable String encoding) throws SecurityException, java.io.UnsupportedEncodingException;",
          "public void setFilter(@Nullable Filter newFilter) throws SecurityException;",
          "public void setErrorManager(ErrorManager em);",
          "public void setLevel(Level newLevel) throws SecurityException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.logging/share/classes/java/util/logging/ErrorManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void error(String msg, Exception ex, int code);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/utils/IdealGraphVisualizer/Filter/src/main/java/com/sun/hotspot/igv/filter/FilterChain.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public FilterChain(String name) {",
          "public void sortBy(List<String> order);",
          "public void applyInOrder(Diagram diagram, FilterChain filterOrder);",
          "public void clearFilters();",
          "public void addFilters(List<Filter> filtersToAdd);",
          "public String getName();",
          "@Override",
          "public String toString();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/net/www/protocol/https/HttpsURLConnectionImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public long getHeaderFieldDate(String name, long defaultValue);",
          "public int getHeaderFieldInt(String name, int defaultValue);",
          "public long getHeaderFieldLong(String name, long defaultValue);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class KeepAliveCache extends HashMap<KeepAliveKey, KeepAliveCache.ClientVector> implements Runnable {",
            "methods": []
          },
          {
            "declaration": "class ClientVector extends ArrayDeque<KeepAliveEntry> {",
            "methods": [
              "HttpClient get();",
              "HttpClient put(HttpClient h);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final int MAX_SIG_FILE_SIZE;",
          "public static boolean isInMetaInf(String name);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/security/x509/X509Key.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void decode(DerValue val) throws InvalidKeyException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/security/x509/AlgorithmId.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final ObjectIdentifier SHA1withRSA_oid;",
          "public static final ObjectIdentifier SHA224withRSA_oid;",
          "public static final ObjectIdentifier SHA256withRSA_oid;",
          "public static final ObjectIdentifier SHA384withRSA_oid;",
          "public static final ObjectIdentifier SHA512withRSA_oid;",
          "public static final ObjectIdentifier SHA512$224withRSA_oid;",
          "public static final ObjectIdentifier SHA512$256withRSA_oid;",
          "public static final ObjectIdentifier MD2withRSA_oid;",
          "public static final ObjectIdentifier MD5withRSA_oid;",
          "public static final ObjectIdentifier SHA3_224withRSA_oid;",
          "public static final ObjectIdentifier SHA3_256withRSA_oid;",
          "public static final ObjectIdentifier SHA3_384withRSA_oid;",
          "public static final ObjectIdentifier SHA3_512withRSA_oid;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class PKCS8Key implements PrivateKey, InternalPrivateKey {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static FileChannel open(FileDescriptor fd, String path, boolean readable, boolean writable, boolean direct, Closeable parent);",
          "public MemorySegment map(MapMode mode, long offset, long size, Arena arena) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/net/InetSocketAddress.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class InetSocketAddressHolder {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/net/Socket.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "SocketImpl impl();",
          "void setConnectedImpl(SocketImpl si) throws SocketException;",
          "void setConnected();",
          "public void setSoTimeout(int timeout) throws SocketException;",
          "public int getSoTimeout() throws SocketException;",
          "public void setSendBufferSize(int size) throws SocketException;",
          "public int getSendBufferSize() throws SocketException;",
          "public void setReceiveBufferSize(int size) throws SocketException;",
          "public int getReceiveBufferSize() throws SocketException;",
          "public void close() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/net/InetAddress.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class CachedLookup implements Addresses, Comparable<CachedLookup> {",
            "methods": [
              "public int compareTo(CachedLookup other);",
              "public boolean tryRemoveExpiredAddress(long now);"
            ]
          },
          {
            "declaration": "private static final class ValidCachedLookup extends CachedLookup {",
            "methods": [
              "@Override",
              "public InetAddress[] get();",
              "@Override",
              "public boolean tryRemoveExpiredAddress(long now);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/TreeMap.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public V putFirst(K k, V v);",
          "public V putLast(K k, V v);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/LinkedList.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static class ReverseOrderLinkedListView<E> extends LinkedList<E> implements java.io.Externalizable {",
            "methods": [
              "public String toString();",
              "public boolean retainAll(Collection<?> c);",
              "public boolean removeAll(Collection<?> c);",
              "public boolean containsAll(Collection<?> c);",
              "public boolean isEmpty();",
              "public Stream<E> parallelStream();",
              "public Stream<E> stream();",
              "public boolean removeIf(Predicate<? super E> filter);",
              "public <T> T[] toArray(IntFunction<T[]> generator);",
              "public void forEach(Consumer<? super E> action);",
              "public Iterator<E> iterator();",
              "public int hashCode();",
              "public boolean equals(Object o);",
              "public List<E> subList(int fromIndex, int toIndex);",
              "public ListIterator<E> listIterator();",
              "public void sort(Comparator<? super E> c);",
              "public void replaceAll(UnaryOperator<E> operator);",
              "public LinkedList<E> reversed();",
              "public Spliterator<E> spliterator();",
              "public <T> T[] toArray(T[] a);",
              "public Object[] toArray();",
              "public Iterator<E> descendingIterator();",
              "public ListIterator<E> listIterator(int index);",
              "public boolean removeLastOccurrence(Object o);",
              "public boolean removeFirstOccurrence(Object o);",
              "public E pop();",
              "public void push(E e);",
              "public E pollLast();",
              "public E pollFirst();",
              "public E peekLast();",
              "public E peekFirst();",
              "public boolean offerLast(E e);",
              "public boolean offerFirst(E e);",
              "public boolean offer(E e);",
              "public E remove();",
              "public E poll();",
              "public E element();",
              "public E peek();",
              "public int lastIndexOf(Object o);",
              "public int indexOf(Object o);",
              "public E remove(int index);",
              "public void add(int index, E element);",
              "public E set(int index, E element);",
              "public E get(int index);",
              "public void clear();",
              "public boolean addAll(int index, Collection<? extends E> c);",
              "public boolean addAll(Collection<? extends E> c);",
              "public boolean remove(Object o);",
              "public boolean add(E e);",
              "public int size();",
              "public boolean contains(Object o);",
              "public void addLast(E e);",
              "public void addFirst(E e);",
              "public E removeLast();",
              "public E removeFirst();",
              "public E getLast();",
              "public E getFirst();",
              "public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;",
              "public void writeExternal(ObjectOutput out) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "public LinkedList<E> reversed();",
          "@SuppressWarnings(\"serial\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/SortedSet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public interface SortedSet<E> extends Set<E>, SequencedSet<E> {",
          "default void addFirst(E e);",
          "default void addLast(E e);",
          "default E getFirst();",
          "default E getLast();",
          "default E removeFirst();",
          "default E removeLast();",
          "default SortedSet<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/LinkedHashMap.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class LinkedHashMap<K, V> extends HashMap<K, V> implements SequencedMap<K, V> {",
            "methods": []
          },
          {
            "declaration": "final class LinkedKeySet extends AbstractSet<K> implements SequencedSet<K> {",
            "methods": [
              "public final void addFirst(K k);",
              "public final void addLast(K k);",
              "public final K getFirst();",
              "public final K getLast();",
              "public final K removeFirst();",
              "public final K removeLast();",
              "public SequencedSet<K> reversed();",
              "public SequencedCollection<V> sequencedValues();"
            ]
          },
          {
            "declaration": "final class LinkedValues extends AbstractCollection<V> implements SequencedCollection<V> {",
            "methods": [
              "public final void addFirst(V v);",
              "public final void addLast(V v);",
              "public final V getFirst();",
              "public final V getLast();",
              "public final V removeFirst();",
              "public final V removeLast();",
              "public SequencedCollection<V> reversed();",
              "public SequencedSet<Map.Entry<K, V>> sequencedEntrySet();"
            ]
          },
          {
            "declaration": "final class LinkedEntrySet extends AbstractSet<Map.Entry<K, V>> implements SequencedSet<Map.Entry<K, V>> {",
            "methods": [
              "final Node<K, V> nsee(Node<K, V> e);",
              "public final void addFirst(Map.Entry<K, V> e);",
              "public final void addLast(Map.Entry<K, V> e);",
              "public final Map.Entry<K, V> getFirst();",
              "public final Map.Entry<K, V> getLast();",
              "public final Map.Entry<K, V> removeFirst();",
              "public final Map.Entry<K, V> removeLast();",
              "public SequencedSet<Map.Entry<K, V>> reversed();"
            ]
          },
          {
            "declaration": "static class ReversedLinkedHashMapView<K, V> extends AbstractMap<K, V> implements SequencedMap<K, V> {",
            "methods": [
              "public boolean equals(Object o);",
              "public int hashCode();",
              "public int size();",
              "public boolean isEmpty();",
              "public boolean containsKey(Object key);",
              "public boolean containsValue(Object value);",
              "public V get(Object key);",
              "public V put(K key, V value);",
              "public V remove(Object key);",
              "public void putAll(Map<? extends K, ? extends V> m);",
              "public void clear();",
              "public Set<K> keySet();",
              "public Collection<V> values();",
              "public Set<Entry<K, V>> entrySet();",
              "public V getOrDefault(Object key, V defaultValue);",
              "public void forEach(BiConsumer<? super K, ? super V> action);",
              "public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function);",
              "public V putIfAbsent(K key, V value);",
              "public boolean remove(Object key, Object value);",
              "public boolean replace(K key, V oldValue, V newValue);",
              "public V replace(K key, V value);",
              "public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction);",
              "public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction);",
              "public V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction);",
              "public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction);",
              "public SequencedMap<K, V> reversed();",
              "public Entry<K, V> firstEntry();",
              "public Entry<K, V> lastEntry();",
              "public Entry<K, V> pollFirstEntry();",
              "public Entry<K, V> pollLastEntry();",
              "public V putFirst(K k, V v);",
              "public V putLast(K k, V v);"
            ]
          }
        ],
        "new_methods": [
          "public V putFirst(K k, V v);",
          "public V putLast(K k, V v);",
          "public SequencedSet<K> sequencedKeySet();",
          "static <K1, V1> Node<K1, V1> nsee(Node<K1, V1> node);",
          "final <T> T[] keysToArray(T[] a, boolean reversed);",
          "final <T> T[] valuesToArray(T[] a, boolean reversed);",
          "public SequencedMap<K, V> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/NavigableMap.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "default NavigableMap<K, V> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/LongSummaryStatistics.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"overloads\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/ImmutableCollections.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public List<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/List.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public interface List<E> extends SequencedCollection<E> {",
          "default void addFirst(E e);",
          "default void addLast(E e);",
          "default E getFirst();",
          "default E getLast();",
          "default E removeFirst();",
          "default E removeLast();",
          "default List<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/ArrayList.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public E getFirst();",
          "public E getLast();",
          "public void addFirst(E element);",
          "public void addLast(E element);",
          "public E removeFirst();",
          "public E removeLast();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Locale.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static Stream<Locale> availableLocales();",
          "public static String caseFoldLanguageTag(String languageTag);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Formatter.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static class FormatSpecifier implements FormatString {",
            "methods": []
          },
          {
            "declaration": "static class Flags {",
            "methods": []
          },
          {
            "declaration": "static class Conversion {",
            "methods": []
          },
          {
            "declaration": "static class DateTime {",
            "methods": []
          }
        ],
        "new_methods": [
          "static List<FormatString> parse(String s);",
          "interface FormatString {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Deque.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public interface Deque<E> extends Queue<E>, SequencedCollection<E> {",
          "default Deque<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/AbstractMap.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "abstract static class ViewCollection<E> implements Collection<E> {",
            "methods": [
              "UnsupportedOperationException uoe();",
              "abstract Collection<E> view();",
              "public boolean add(E t);",
              "public boolean addAll(Collection<? extends E> c);",
              "public void clear();",
              "public boolean contains(Object o);",
              "public boolean containsAll(Collection<?> c);",
              "public void forEach(Consumer<? super E> c);",
              "public boolean isEmpty();",
              "public Iterator<E> iterator();",
              "public Stream<E> parallelStream();",
              "public boolean remove(Object o);",
              "public boolean removeAll(Collection<?> c);",
              "public boolean removeIf(Predicate<? super E> filter);",
              "public boolean retainAll(Collection<?> c);",
              "public int size();",
              "public Spliterator<E> spliterator();",
              "public Stream<E> stream();",
              "public Object[] toArray();",
              "public <T> T[] toArray(IntFunction<T[]> generator);",
              "public <T> T[] toArray(T[] a);",
              "public String toString();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/LinkedHashSet.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class LinkedHashSet<E> extends HashSet<E> implements SequencedSet<E>, Cloneable, java.io.Serializable {",
            "methods": [
              "@SuppressWarnings(\"unchecked\")",
              "LinkedHashMap<E, Object> map();",
              "public void addFirst(E e);",
              "public void addLast(E e);",
              "public E getFirst();",
              "public E getLast();",
              "public E removeFirst();",
              "public E removeLast();",
              "public SequencedSet<E> reversed();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Collections.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static class UnmodifiableSequencedCollection<E> extends UnmodifiableCollection<E> implements SequencedCollection<E>, Serializable {",
            "methods": [
              "public SequencedCollection<E> reversed();",
              "public void addFirst(E e);",
              "public void addLast(E e);",
              "public E getFirst();",
              "public E getLast();",
              "public E removeFirst();",
              "public E removeLast();",
              "@SuppressWarnings(\"unchecked\")"
            ]
          },
          {
            "declaration": "static class UnmodifiableSequencedSet<E> extends UnmodifiableSequencedCollection<E> implements SequencedSet<E>, Serializable {",
            "methods": [
              "public boolean equals(Object o);",
              "public int hashCode();",
              "public SequencedSet<E> reversed();"
            ]
          },
          {
            "declaration": "private static class UnmodifiableSequencedMap<K, V> extends UnmodifiableMap<K, V> implements SequencedMap<K, V>, Serializable {",
            "methods": [
              "public SequencedMap<K, V> reversed();",
              "public Entry<K, V> pollFirstEntry();",
              "public Entry<K, V> pollLastEntry();",
              "public V putFirst(K k, V v);",
              "public V putLast(K k, V v);",
              "@SuppressWarnings(\"unchecked\")"
            ]
          },
          {
            "declaration": "private static class SequencedSetFromMap<E> extends SetFromMap<E> implements SequencedSet<E> {",
            "methods": [
              "public SequencedSet<E> reversed();",
              "public void addFirst(E e);",
              "public void addLast(E e);",
              "public E getFirst();",
              "public E getLast();",
              "public E removeFirst();",
              "public E removeLast();"
            ]
          }
        ],
        "new_methods": [
          "public static void shuffle(List<?> list, Random rnd);",
          "public static void shuffle(@GuardSatisfied List<?> list, RandomGenerator rnd);",
          "@SuppressWarnings({ \"unchecked\" })",
          "@SuppressWarnings({ \"unchecked\" })",
          "public static <T> SequencedCollection<T> unmodifiableSequencedCollection(SequencedCollection<? extends T> c);",
          "@SuppressWarnings(\"unchecked\")",
          "public static <T> SequencedSet<T> unmodifiableSequencedSet(SequencedSet<? extends T> s);",
          "public static <K, V> SequencedMap<K, V> unmodifiableSequencedMap(SequencedMap<? extends K, ? extends V> m);",
          "public static <E> SequencedSet<E> newSequencedSetFromMap(SequencedMap<E, Boolean> map);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/PrimitiveIterator.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Arrays.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class Arrays {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Spliterator.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/NavigableSet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "default E removeFirst();",
          "default E removeLast();",
          "default NavigableSet<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/SortedMap.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public interface SortedMap<K, V> extends SequencedMap<K, V> {",
          "default V putFirst(K k, V v);",
          "default V putLast(K k, V v);",
          "default SortedMap<K, V> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/TreeSet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void addFirst(E e);",
          "public void addLast(E e);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/Spliterators.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")",
          "@SuppressWarnings(\"overloads\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/stream/Collectors.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public int size();",
          "@Override",
          "public boolean isEmpty();",
          "@Override",
          "public T get(Object key);",
          "@Override",
          "public boolean containsKey(Object key);",
          "@Override",
          "public boolean containsValue(Object value);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/regex/Pattern.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public String @MinLen(1) [] splitWithDelimiters(CharSequence input, int limit);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/zip/ZipCoder.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "Comparison compare(String str, byte[] b, int off, int len, boolean matchDirectory);",
          "@Override",
          "Comparison compare(String str, byte[] b, int off, int len, boolean matchDirectory);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/concurrent/CopyOnWriteArrayList.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class Reversed<E> implements List<E>, RandomAccess {",
            "methods": []
          },
          {
            "declaration": "class DescendingIterator implements Iterator<E> {",
            "methods": [
              "public boolean hasNext();",
              "public E next();",
              "public void remove();"
            ]
          },
          {
            "declaration": "class DescendingListIterator implements ListIterator<E> {",
            "methods": [
              "public boolean hasNext();",
              "public E next();",
              "public boolean hasPrevious();",
              "public E previous();",
              "public int nextIndex();",
              "public int previousIndex();",
              "public void remove();",
              "public void set(E e);",
              "public void add(E e);",
              "public void forEach(Consumer<? super E> action);",
              "public Iterator<E> iterator();",
              "public Spliterator<E> spliterator();",
              "public boolean add(E e);",
              "public boolean addAll(Collection<? extends E> c);",
              "public void clear();",
              "public boolean contains(Object o);",
              "public boolean containsAll(Collection<?> c);",
              "public boolean equals(Object o);",
              "public int hashCode();",
              "public boolean isEmpty();",
              "public Stream<E> parallelStream();",
              "public boolean remove(Object o);",
              "public boolean removeAll(Collection<?> c);",
              "public boolean retainAll(Collection<?> c);",
              "public int size();",
              "public Stream<E> stream();",
              "public Object[] toArray();",
              "@SuppressWarnings(\"unchecked\")",
              "public <T> T[] toArray(T[] a);",
              "public <T> T[] toArray(IntFunction<T[]> generator);",
              "public String toString();",
              "public void add(int index, E element);",
              "public void addFirst(E e);",
              "public void addLast(E e);",
              "public boolean addAll(int index, Collection<? extends E> c);",
              "public E get(int i);",
              "public E getFirst();",
              "public E getLast();",
              "public int indexOf(Object o);",
              "public int lastIndexOf(Object o);",
              "public ListIterator<E> listIterator();",
              "public ListIterator<E> listIterator(int index);",
              "public E remove(int index);",
              "public E removeFirst();",
              "public E removeLast();",
              "public boolean removeIf(Predicate<? super E> filter);",
              "public void replaceAll(UnaryOperator<E> operator);",
              "public void sort(Comparator<? super E> c);",
              "public E set(int index, E element);",
              "public List<E> subList(int fromIndex, int toIndex);",
              "public List<E> reversed();"
            ]
          }
        ],
        "new_methods": [
          "public E getFirst();",
          "public E getLast();",
          "public void addFirst(E e);",
          "public void addLast(E e);",
          "public E removeFirst();",
          "public E removeLast();",
          "public E getFirst();",
          "public E getLast();",
          "public void addFirst(E e);",
          "public void addLast(E e);",
          "public E removeFirst();",
          "public E removeLast();",
          "public List<E> reversed();",
          "public List<E> reversed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/concurrent/ConcurrentSkipListSet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void addFirst(E e);",
          "public void addLast(E e);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/concurrent/DelayQueue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public E remove();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/concurrent/ConcurrentSkipListMap.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public V putFirst(K k, V v);",
          "public V putLast(K k, V v);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/util/concurrent/Executors.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class AutoShutdownDelegatedExecutorService extends DelegatedExecutorService {",
            "methods": [
              "@Override",
              "public void shutdown();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/security/cert/CertStore.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final String getDefaultType();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/io/ObjectInputStream.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class HandleTable {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/io/ObjectOutputStream.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class BlockDataOutputStream extends OutputStream implements DataOutput {",
            "methods": []
          },
          {
            "declaration": "private static final class HandleTable {",
            "methods": []
          },
          {
            "declaration": "private static final class ReplaceTable {",
            "methods": []
          },
          {
            "declaration": "private static final class DebugTraceInfoStack {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/io/ObjectStreamClass.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class MemberSignature {",
            "methods": []
          },
          {
            "declaration": "private static final class FieldReflector {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/io/Console.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public sealed class Console implements Flushable permits ProxyingConsole {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/io/SerialCallbackContext.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "Object getObj() throws NotActiveException;",
          "ObjectStreamClass getDesc();",
          "void check() throws NotActiveException;",
          "void checkAndSetUsed() throws NotActiveException;",
          "void setUsed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/time/chrono/MinguoDate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public MinguoDate minus(long amountToSubtract, TemporalUnit unit);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/time/chrono/JapaneseDate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public JapaneseDate minus(long amountToSubtract, TemporalUnit unit);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/time/chrono/ThaiBuddhistDate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public ThaiBuddhistDate minus(long amountToSubtract, TemporalUnit unit);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/StringBuilder.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class StringBuilder extends AbstractStringBuilder implements Appendable, java.io.Serializable, Comparable<StringBuilder>, CharSequence {",
            "methods": [
              "@Override",
              "public StringBuilder repeat(int codePoint, int count);",
              "@Override",
              "public StringBuilder repeat(CharSequence cs, int count);",
              "@IntrinsicCandidate",
              "@Override"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/StringBuffer.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class StringBuffer extends AbstractStringBuilder implements Appendable, Serializable, Comparable<StringBuffer>, CharSequence {",
            "methods": [
              "@Override",
              "public synchronized StringBuffer repeat(int codePoint, int count);",
              "@Override",
              "public synchronized StringBuffer repeat(CharSequence cs, int count);",
              "@IntrinsicCandidate",
              "@Override"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/Class.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@PreviewFeature(feature = PreviewFeature.Feature.UNNAMED_CLASSES, reflective = true)",
          "public boolean isUnnamedClass();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/String.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static String newStringUTF8NoRepl(byte[] bytes, int offset, int length, boolean noShare);",
          "@IndexOrLow({ \"this\" })",
          "public int indexOf(int ch, int beginIndex, int endIndex);",
          "public int indexOf(String str, int beginIndex, int endIndex);",
          "public String @MinLen(1) [] splitWithDelimiters(@Regex String regex, int limit);",
          "static void repeatCopyRest(byte[] buffer, int offset, int limit, int copied);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/Character.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static boolean isEmoji(int codePoint);",
          "public static boolean isEmojiPresentation(int codePoint);",
          "public static boolean isEmojiModifier(int codePoint);",
          "public static boolean isEmojiModifierBase(int codePoint);",
          "public static boolean isEmojiComponent(int codePoint);",
          "public static boolean isExtendedPictographic(int codePoint);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/CharacterData.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "abstract boolean isEmoji(int ch);",
          "abstract boolean isEmojiPresentation(int ch);",
          "abstract boolean isEmojiModifier(int ch);",
          "abstract boolean isEmojiModifierBase(int ch);",
          "abstract boolean isEmojiComponent(int ch);",
          "abstract boolean isExtendedPictographic(int ch);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/ThreadLocal.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class StackWalkerHolder {",
            "methods": []
          }
        ],
        "new_methods": [
          "static void dumpStackIfVirtualThread();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/ClassLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "String nameAndId();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/AbstractStringBuilder.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "long mix(long lengthCoder);",
          "long prepend(long lengthCoder, byte[] buffer);",
          "public AbstractStringBuilder repeat(int codePoint, int count);",
          "public AbstractStringBuilder repeat(CharSequence cs, int count);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/Math.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static int clamp(long value, int min, int max);",
          "public static long clamp(long value, long min, long max);",
          "public static double clamp(double value, double min, double max);",
          "public static float clamp(float value, float min, float max);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/Thread.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public sealed interface Builder permits Builder.OfPlatform, Builder.OfVirtual {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/StrictMath.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static double sin(double a);",
          "public static double cos(double a);",
          "public static double tan(double a);",
          "public static double asin(double a);",
          "public static double acos(double a);",
          "public static double atan(double a);",
          "public static double log(double a);",
          "public static double log10(double a);",
          "public static double sqrt(double a);",
          "public static double IEEEremainder(double f1, double f2);",
          "public static double atan2(double y, double x);",
          "public static int clamp(long value, int min, int max);",
          "public static long clamp(long value, long min, long max);",
          "public static double clamp(double value, double min, double max);",
          "public static float clamp(float value, float min, float max);",
          "public static double sinh(double x);",
          "public static double cosh(double x);",
          "public static double tanh(double x);",
          "public static double expm1(double x);",
          "public static double log1p(double x);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/invoke/MethodHandles.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "ClassDefiner makeClassDefiner(String name, byte[] bytes, ClassFileDumper dumper);",
          "ClassDefiner makeHiddenClassDefiner(byte[] bytes, ClassFileDumper dumper);",
          "ClassDefiner makeHiddenClassDefiner(String name, byte[] bytes, Set<ClassOption> options, ClassFileDumper dumper);",
          "String internalName();",
          "public <T> Class<T> ensureInitialized(Class<T> targetClass) throws IllegalAccessException;",
          "public <T> Class<T> accessClass(Class<T> targetClass) throws IllegalAccessException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/lang/invoke/LambdaForm.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static LambdaForm create(int arity, Name[] names, int result);",
          "static LambdaForm create(int arity, Name[] names, int result, Kind kind);",
          "static LambdaForm create(int arity, Name[] names);",
          "static LambdaForm create(int arity, Name[] names, Kind kind);",
          "static LambdaForm create(int arity, Name[] names, boolean forceInline, Kind kind);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/nio/Buffer.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@ForceInline",
          "@ForceInline"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/java/nio/channels/FileChannel.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public MemorySegment map(MapMode mode, long offset, long size, Arena arena) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/javax/net/ssl/TrustManagerFactory.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final String getDefaultAlgorithm();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.base/share/classes/com/sun/crypto/provider/PBKDF2KeyImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void clear();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.net.http/share/classes/jdk/internal/net/http/RequestPublishers.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean hasNext();",
          "public ByteBuffer next();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/java.net.http/share/classes/jdk/internal/net/http/ConnectionPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void start();",
          "HttpConnection getConnection(boolean secure, InetSocketAddress addr, InetSocketAddress proxy);",
          "boolean contains(HttpConnection c);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/gc/shared/ContiguousSpace.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class ContiguousSpace extends Space implements LiveRegionsProvider {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlLinkInfo.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class HtmlLinkInfo {",
            "methods": [
              "PLAIN,",
              "SHOW_PREVIEW,",
              "SHOW_TYPE_PARAMS,",
              "SHOW_TYPE_PARAMS_IN_LABEL,",
              "SHOW_TYPE_PARAMS_AND_BOUNDS,",
              "LINK_TYPE_PARAMS,",
              "LINK_TYPE_PARAMS_AND_BOUNDS",
              "public HtmlLinkInfo forType(TypeMirror type);",
              "public void setTypeElement(TypeElement typeElement);",
              "public TypeElement getTypeElement();",
              "public ExecutableElement getExecutableElement();",
              "public TypeMirror getType();",
              "public Content getLabel();",
              "public HtmlStyle getStyle();",
              "public boolean isVarArg();",
              "public HtmlLinkInfo fragment(String fragment);",
              "public String getFragment();",
              "public HtmlLinkInfo addLineBreaksInTypeParameters(boolean addLineBreaksInTypeParameters);",
              "public boolean addLineBreaksInTypeParameters();",
              "public HtmlLinkInfo addLineBreakOpportunitiesInTypeParameters(boolean addLineBreakOpportunities);",
              "public boolean addLineBreakOpportunitiesInTypeParameters();",
              "public HtmlLinkInfo linkToSelf(boolean linkToSelf);",
              "public boolean linkToSelf();",
              "public boolean linkTypeParameters();",
              "public void showTypeBounds(boolean showTypeBounds);",
              "public boolean showTypeBounds();",
              "public HtmlLinkInfo showTypeParameterAnnotations(boolean showTypeParameterAnnotations);",
              "public boolean showTypeParameterAnnotations();",
              "public Element getTargetMember();",
              "public boolean isSkipPreview();",
              "public boolean showTypeParameters();",
              "public Content getClassLinkLabel(BaseConfiguration configuration);",
              "protected Content newContent();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private class LocalMemberTable {",
            "methods": [
              "List<Element> getMembers(Name simpleName, Kind kind);",
              "<T extends Element> List<T> getMembers(Name simpleName, Kind kind, Class<T> clazz);",
              "List<ExecutableElement> getPropertyMethods(Name simpleName);",
              "private record PropertyMembers(ExecutableElement propertyMethod, VariableElement field, ExecutableElement getter, ExecutableElement setter) {"
            ]
          }
        ],
        "new_methods": [
          "public ImplementedMethods(ExecutableElement implementer) {",
          "private record OverrideInfo(ExecutableElement overriddenMethod, boolean simpleOverride) {",
          "@Override",
          "public String toString();",
          "@Override",
          "public int hashCode();",
          "@Override",
          "public boolean equals(Object obj);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public record OverrideInfo(ExecutableElement overriddenMethod, DeclaredType overriddenMethodOwner) {",
          "public OverrideInfo overriddenMethod(ExecutableElement method);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ToolEnvironment.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean isUnnamed(Symbol sym);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/RegisterValue.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class RegisterValue extends AllocatableValue {",
            "methods": [
              "protected RegisterValue(ValueKind<?> kind, Register register) {",
              "@Override",
              "public String toString();",
              "public Register getRegister();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/BytecodePosition.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class BytecodePosition {",
            "methods": [
              "public BytecodePosition(BytecodePosition caller, ResolvedJavaMethod method, int bci) {",
              "@Override",
              "public String toString();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();",
              "public int getBCI();",
              "public ResolvedJavaMethod getMethod();",
              "public BytecodePosition getCaller();",
              "public BytecodePosition addCaller(BytecodePosition link);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/DebugInfo.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class DebugInfo {",
            "methods": [
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of `virtualObjectMapping`\")",
              "public DebugInfo(BytecodePosition codePos, VirtualObject[] virtualObjectMapping) {",
              "public DebugInfo(BytecodePosition codePos) {",
              "public void setReferenceMap(ReferenceMap referenceMap);",
              "public boolean hasFrame();",
              "public BytecodeFrame frame();",
              "@Override",
              "public String toString();",
              "public BytecodePosition getBytecodePosition();",
              "public ReferenceMap getReferenceMap();",
              "public VirtualObject[] getVirtualObjectMapping();",
              "public void setCalleeSaveInfo(RegisterSaveLayout calleeSaveInfo);",
              "public RegisterSaveLayout getCalleeSaveInfo();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/VirtualObject.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class VirtualObject implements JavaValue {",
            "methods": [
              "public static VirtualObject get(ResolvedJavaType type, int id);",
              "public static VirtualObject get(ResolvedJavaType type, int id, boolean isAutoBox);",
              "public interface LayoutVerifier {",
              "int getOffset(ResolvedJavaField field);",
              "default JavaKind getStorageKind(ResolvedJavaField field);",
              "public void verifyLayout(LayoutVerifier verifier);",
              "@Override",
              "public String toString();",
              "public ResolvedJavaType getType();",
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP\", justification = \"`values` is intentional mutable\")",
              "public JavaValue[] getValues();",
              "public JavaKind getSlotKind(int index);",
              "public int getId();",
              "public boolean isAutoBox();",
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of `slotKinds`\")",
              "public void setValues(JavaValue[] values, JavaKind[] slotKinds);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object o);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/RegisterSaveLayout.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class RegisterSaveLayout {",
            "methods": [
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of `registers` and `slots`\")",
              "public RegisterSaveLayout(Register[] registers, int[] slots) {",
              "public int size();",
              "public int registerToSlot(Register register);",
              "public Map<Register, Integer> registersToSlots(boolean sorted);",
              "public Map<Integer, Register> slotsToRegisters(boolean sorted);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/Register.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class Register implements Comparable<Register> {",
            "methods": [
              "public static final RegisterCategory SPECIAL;",
              "public static final Register None;",
              "public final int number;",
              "public final String name;",
              "public final int encoding;",
              "public int encoding();"
            ]
          },
          {
            "declaration": "public static class RegisterCategory {",
            "methods": [
              "public RegisterCategory(String name) {",
              "public RegisterCategory(String name, boolean mayContainReference) {",
              "@Override",
              "public String toString();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "public Register(int number, int encoding, String name, RegisterCategory registerCategory) {",
              "public RegisterCategory getRegisterCategory();",
              "public boolean mayContainReference();",
              "public RegisterValue asValue(ValueKind<?> kind);",
              "public RegisterValue asValue();",
              "public boolean isValid();",
              "@Override",
              "public String toString();",
              "@Override",
              "public int compareTo(Register o);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/RegisterArray.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class RegisterArray implements Iterable<Register> {",
            "methods": [
              "public RegisterArray(Register... registers) {",
              "public RegisterArray(Collection<Register> registers) {",
              "public int size();",
              "public Register get(int index);",
              "public void addTo(Collection<Register> collection);",
              "public List<Register> asList();",
              "public Register[] toArray();",
              "@Override",
              "public Iterator<Register> iterator();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/BytecodeFrame.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class BytecodeFrame extends BytecodePosition {",
            "methods": [
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"field is intentionally mutable\")",
              "public final JavaValue[] values;",
              "public final int numLocals;",
              "public final int numStack;",
              "public final int numLocks;",
              "public final boolean rethrowException;",
              "public final boolean duringCall;",
              "public static final int UNKNOWN_BCI;",
              "public static final int UNWIND_BCI;",
              "public static final int BEFORE_BCI;",
              "public static final int AFTER_BCI;",
              "public static final int AFTER_EXCEPTION_BCI;",
              "public static final int INVALID_FRAMESTATE_BCI;",
              "public static boolean isPlaceholderBci(int bci);",
              "public static String getPlaceholderBciName(int bci);",
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of `slotKinds`\")",
              "public BytecodeFrame(BytecodeFrame caller, ResolvedJavaMethod method, int bci, boolean rethrowException, boolean duringCall, JavaValue[] values, JavaKind[] slotKinds, int numLocals, int numStack, int numLocks) {",
              "public void verifyInvariants();",
              "public boolean validateFormat();",
              "public JavaKind getLocalValueKind(int i);",
              "public JavaKind getStackValueKind(int i);",
              "public JavaValue getLocalValue(int i);",
              "public JavaValue getStackValue(int i);",
              "public JavaValue getLockValue(int i);",
              "public BytecodeFrame caller();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/StackLockValue.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class StackLockValue implements JavaValue {",
            "methods": [
              "public StackLockValue(JavaValue object, AllocatableValue slot, boolean eliminated) {",
              "public JavaValue getOwner();",
              "public void setOwner(JavaValue newOwner);",
              "public AllocatableValue getSlot();",
              "public boolean isEliminated();",
              "@Override",
              "public String toString();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "public void setSlot(AllocatableValue stackSlot);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/StackSlot.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class StackSlot extends AllocatableValue {",
            "methods": [
              "public static StackSlot get(ValueKind<?> kind, int offset, boolean addFrameSize);",
              "public int getOffset(int totalFrameSize);",
              "public boolean isInCallerFrame();",
              "public int getRawOffset();",
              "public boolean getRawAddFrameSize();",
              "@Override",
              "public String toString();",
              "public StackSlot asOutArg();",
              "public StackSlot asInArg();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/Infopoint.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Infopoint extends Site implements Comparable<Infopoint> {",
            "methods": [
              "public final DebugInfo debugInfo;",
              "public final InfopointReason reason;",
              "public Infopoint(int pcOffset, DebugInfo debugInfo, InfopointReason reason) {",
              "@Override",
              "public String toString();",
              "@Override",
              "public int compareTo(Infopoint o);",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "protected static void appendDebugInfo(StringBuilder sb, DebugInfo info);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/Mark.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class Mark extends Site {",
            "methods": [
              "public final Object id;",
              "public Mark(int pcOffset, Object id) {",
              "@Override",
              "public String toString();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/DataPatch.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class DataPatch extends Site {",
            "methods": [
              "public Reference reference;",
              "public Object note;",
              "public DataPatch(int pcOffset, Reference reference) {",
              "public DataPatch(int pcOffset, Reference reference, Object note) {",
              "@Override",
              "public String toString();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/ConstantReference.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class ConstantReference extends Reference {",
            "methods": [
              "public ConstantReference(VMConstant constant) {",
              "public VMConstant getConstant();",
              "@Override",
              "public String toString();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/ExceptionHandler.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class ExceptionHandler extends Site {",
            "methods": [
              "public final int handlerPos;",
              "public ExceptionHandler(int pcOffset, int handlerPos) {",
              "@Override",
              "public String toString();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/DataSectionReference.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class DataSectionReference extends Reference {",
            "methods": [
              "public DataSectionReference() {",
              "public int getOffset();",
              "public void setOffset(int offset);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/site/Call.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class Call extends Infopoint {",
            "methods": [
              "public final InvokeTarget target;",
              "public final int size;",
              "public final boolean direct;",
              "public Call(InvokeTarget target, int pcOffset, int size, boolean direct, DebugInfo debugInfo) {",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.code.site;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/Local.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Local {",
            "methods": [
              "public Local(String name, JavaType type, int startBci, int endBci, int slot) {",
              "public int getStartBCI();",
              "public int getEndBCI();",
              "public String getName();",
              "public JavaType getType();",
              "public int getSlot();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/UnresolvedJavaMethod.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class UnresolvedJavaMethod implements JavaMethod {",
            "methods": [
              "protected JavaType holder;",
              "public UnresolvedJavaMethod(String name, Signature signature, JavaType holder) {",
              "@Override",
              "public String getName();",
              "@Override",
              "public Signature getSignature();",
              "@Override",
              "public JavaType getDeclaringClass();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/ExceptionHandler.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class ExceptionHandler {",
            "methods": [
              "public ExceptionHandler(int startBCI, int endBCI, int catchBCI, int catchTypeCPI, JavaType catchType) {",
              "public int getStartBCI();",
              "public int getEndBCI();",
              "public int getHandlerBCI();",
              "public int catchTypeCPI();",
              "public boolean isCatchAll();",
              "public JavaType getCatchType();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();",
              "@Override",
              "public int hashCode();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/PrimitiveConstant.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class PrimitiveConstant implements JavaConstant, SerializableConstant {",
            "methods": [
              "protected PrimitiveConstant(JavaKind kind, long primitive) {",
              "static PrimitiveConstant forTypeChar(char kind, long i);",
              "public long getRawValue();",
              "@Override",
              "public JavaKind getJavaKind();",
              "@Override",
              "public boolean isNull();",
              "@Override",
              "public boolean isDefaultForKind();",
              "@Override",
              "public boolean asBoolean();",
              "@Override",
              "public int asInt();",
              "@Override",
              "public long asLong();",
              "@Override",
              "public float asFloat();",
              "@Override",
              "public double asDouble();",
              "@Override",
              "public Object asBoxedPrimitive();",
              "@Override",
              "public int getSerializedSize();",
              "@Override",
              "public void serialize(ByteBuffer buffer);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object o);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/UnresolvedJavaField.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class UnresolvedJavaField implements JavaField {",
            "methods": [
              "public UnresolvedJavaField(JavaType holder, String name, JavaType type) {",
              "@Override",
              "public String getName();",
              "@Override",
              "public JavaType getType();",
              "@Override",
              "public JavaType getDeclaringClass();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();",
              "public ResolvedJavaField resolve(ResolvedJavaType accessingClass);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/NullConstant.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class NullConstant implements JavaConstant {",
            "methods": [
              "protected NullConstant() {",
              "@Override",
              "public JavaKind getJavaKind();",
              "@Override",
              "public boolean isNull();",
              "@Override",
              "public boolean isDefaultForKind();",
              "@Override",
              "public Object asBoxedPrimitive();",
              "@Override",
              "public int asInt();",
              "@Override",
              "public boolean asBoolean();",
              "@Override",
              "public long asLong();",
              "@Override",
              "public float asFloat();",
              "@Override",
              "public double asDouble();",
              "@Override",
              "public String toString();",
              "@Override",
              "public String toValueString();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object o);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/JavaTypeProfile.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class JavaTypeProfile extends AbstractJavaProfile<ProfiledType, ResolvedJavaType> {",
            "methods": [
              "public JavaTypeProfile(TriState nullSeen, double notRecordedProbability, ProfiledType[] pitems) {",
              "public TriState getNullSeen();",
              "public ProfiledType[] getTypes();",
              "public JavaTypeProfile restrict(JavaTypeProfile otherProfile);",
              "public JavaTypeProfile restrict(ResolvedJavaType declaredType, boolean nonNull);",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object other);",
              "@Override",
              "public int hashCode();"
            ]
          },
          {
            "declaration": "public static class ProfiledType extends AbstractProfiledItem<ResolvedJavaType> {",
            "methods": [
              "public ProfiledType(ResolvedJavaType type, double probability) {",
              "public ResolvedJavaType getType();",
              "@Override",
              "public String toString();",
              "@Override",
              "public String toString();",
              "public boolean allTypesRecorded();",
              "public ResolvedJavaType asSingleType();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/UnresolvedJavaType.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class UnresolvedJavaType implements JavaType {",
            "methods": [
              "@Override",
              "public String getName();",
              "public static UnresolvedJavaType create(String name);",
              "@Override",
              "public JavaType getComponentType();",
              "@Override",
              "public JavaType getArrayClass();",
              "@Override",
              "public JavaKind getJavaKind();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();",
              "@Override",
              "public ResolvedJavaType resolve(ResolvedJavaType accessingClass);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/Assumptions.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class Assumptions implements Iterable<Assumptions.Assumption> {",
            "methods": []
          },
          {
            "declaration": "public abstract static class Assumption {",
            "methods": []
          },
          {
            "declaration": "public static class AssumptionResult<T> {",
            "methods": [
              "public AssumptionResult(T result, Assumption... assumptions) {",
              "public AssumptionResult(T result) {",
              "public T getResult();",
              "public boolean isAssumptionFree();",
              "public void add(AssumptionResult<T> other);",
              "public boolean canRecordTo(Assumptions target);",
              "public void recordTo(Assumptions target);",
              "@Override",
              "public String toString();"
            ]
          },
          {
            "declaration": "public static final class NoFinalizableSubclass extends Assumption {",
            "methods": [
              "public final ResolvedJavaType receiverType;",
              "public NoFinalizableSubclass(ResolvedJavaType receiverType) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "@Override",
              "public String toString();"
            ]
          },
          {
            "declaration": "public static final class ConcreteSubtype extends Assumption {",
            "methods": [
              "public final ResolvedJavaType context;",
              "public final ResolvedJavaType subtype;",
              "public ConcreteSubtype(ResolvedJavaType context, ResolvedJavaType subtype) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "@Override",
              "public String toString();"
            ]
          },
          {
            "declaration": "public static final class LeafType extends Assumption {",
            "methods": [
              "public final ResolvedJavaType context;",
              "public LeafType(ResolvedJavaType context) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "@Override",
              "public String toString();"
            ]
          },
          {
            "declaration": "public static final class ConcreteMethod extends Assumption {",
            "methods": [
              "public final ResolvedJavaMethod method;",
              "public final ResolvedJavaType context;",
              "public final ResolvedJavaMethod impl;",
              "public ConcreteMethod(ResolvedJavaMethod method, ResolvedJavaType context, ResolvedJavaMethod impl) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "@Override",
              "public String toString();"
            ]
          },
          {
            "declaration": "public static final class CallSiteTargetValue extends Assumption {",
            "methods": [
              "public final JavaConstant callSite;",
              "public final JavaConstant methodHandle;",
              "public CallSiteTargetValue(JavaConstant callSite, JavaConstant methodHandle) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public boolean equals(Object obj);",
              "@Override",
              "public String toString();",
              "public boolean isEmpty();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public Iterator<Assumption> iterator();",
              "public void recordNoFinalizableSubclassAssumption(ResolvedJavaType receiverType);",
              "public void recordConcreteSubtype(ResolvedJavaType context, ResolvedJavaType subtype);",
              "public void recordConcreteMethod(ResolvedJavaMethod method, ResolvedJavaType context, ResolvedJavaMethod impl);",
              "public void record(Assumption assumption);",
              "public Assumption[] toArray();",
              "public void record(Assumptions other);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/AbstractJavaProfile.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class AbstractJavaProfile<T extends AbstractProfiledItem<U>, U> {",
            "methods": [
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of the `pitems` array parameter\")",
              "public AbstractJavaProfile(double notRecordedProbability, T[] pitems) {",
              "public double getNotRecordedProbability();",
              "protected T[] getItems();",
              "public T findEntry(ResolvedJavaType type);",
              "@Override",
              "public String toString();",
              "public boolean isIncluded(U item);",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/Value.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class Value {",
            "methods": [
              "public static final Value[] NO_VALUES;",
              "public static final AllocatableValue ILLEGAL;"
            ]
          },
          {
            "declaration": "private static final class IllegalValue extends AllocatableValue {",
            "methods": [
              "@Override",
              "public String toString();",
              "@Override",
              "public boolean equals(Object other);",
              "protected Value(ValueKind<?> valueKind) {",
              "protected final String getKindSuffix();",
              "public final ValueKind<?> getValueKind();",
              "public final <K extends ValueKind<K>> K getValueKind(Class<K> cls);",
              "public final PlatformKind getPlatformKind();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "public final boolean identityEquals(Value other);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/meta/AbstractProfiledItem.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class AbstractProfiledItem<T> implements Comparable<AbstractProfiledItem<?>> {",
            "methods": [
              "protected final T item;",
              "protected final double probability;",
              "public AbstractProfiledItem(T item, double probability) {",
              "protected T getItem();",
              "public double getProbability();",
              "@Override",
              "public int compareTo(AbstractProfiledItem<?> o);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public abstract String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.meta;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotObjectConstantImpl.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "abstract class HotSpotObjectConstantImpl implements HotSpotObjectConstant {",
            "methods": [
              "protected final boolean compressed;",
              "@Override",
              "public JavaKind getJavaKind();",
              "@Override",
              "public boolean isCompressed();",
              "@Override",
              "public abstract JavaConstant compress();",
              "@Override",
              "public abstract JavaConstant uncompress();",
              "@Override",
              "public HotSpotResolvedObjectType getType();",
              "@Override",
              "public abstract int getIdentityHashCode();",
              "@Override",
              "public JavaConstant getCallSiteTarget(Assumptions assumptions);",
              "@Override",
              "public boolean isInternedString();",
              "@Override",
              "public <T> T asObject(Class<T> type);",
              "@Override",
              "public Object asObject(ResolvedJavaType type);",
              "@Override",
              "public boolean isNull();",
              "@Override",
              "public boolean isDefaultForKind();",
              "@Override",
              "public Object asBoxedPrimitive();",
              "@Override",
              "public int asInt();",
              "@Override",
              "public boolean asBoolean();",
              "@Override",
              "public long asLong();",
              "@Override",
              "public float asFloat();",
              "@Override",
              "public double asDouble();",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "@Override",
              "public boolean equals(@Nullable Object o);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public String toValueString();",
              "@Override",
              "public String toString();",
              "public JavaConstant readFieldValue(HotSpotResolvedJavaField field);",
              "public ResolvedJavaType asJavaType();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotSignature.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class HotSpotSignature implements Signature {",
            "methods": [
              "public HotSpotSignature(HotSpotJVMCIRuntime runtime, String signature) {",
              "public HotSpotSignature(HotSpotJVMCIRuntime runtime, ResolvedJavaType returnType, ResolvedJavaType... parameterTypes) {",
              "@Override",
              "public int getParameterCount(boolean withReceiver);",
              "@Override",
              "public JavaKind getParameterKind(int index);",
              "@Override",
              "public JavaType getParameterType(int index, ResolvedJavaType accessingClass);",
              "@Override",
              "public String toMethodDescriptor();",
              "@Override",
              "public JavaKind getReturnKind();",
              "@Override",
              "public JavaType getReturnType(ResolvedJavaType accessingClass);",
              "@Override",
              "public String toString();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotResolvedJavaFieldImpl.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "class HotSpotResolvedJavaFieldImpl implements HotSpotResolvedJavaField {",
            "methods": [
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public int getModifiers();",
              "@Override",
              "public boolean isInternal();",
              "@Override",
              "public boolean isInObject(JavaConstant object);",
              "@Override",
              "public HotSpotResolvedObjectTypeImpl getDeclaringClass();",
              "@Override",
              "public String getName();",
              "@Override",
              "public JavaType getType();",
              "@Override",
              "public int getOffset();",
              "int getIndex();",
              "@Override",
              "public String toString();",
              "@Override",
              "public boolean isSynthetic();",
              "@Override",
              "public boolean isStable();",
              "@Override",
              "public Annotation[] getAnnotations();",
              "@Override",
              "public Annotation[] getDeclaredAnnotations();",
              "@Override",
              "public <T extends Annotation> T getAnnotation(Class<T> annotationClass);",
              "@Override",
              "public JavaConstant getConstantValue();",
              "@Override",
              "public AnnotationData getAnnotationData(ResolvedJavaType annotationType);",
              "@Override",
              "public List<AnnotationData> getAnnotationData(ResolvedJavaType type1, ResolvedJavaType type2, ResolvedJavaType... types);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotCompressedNullConstant.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class HotSpotCompressedNullConstant implements JavaConstant, HotSpotConstant {",
            "methods": [
              "public static final JavaConstant COMPRESSED_NULL;",
              "@Override",
              "public JavaKind getJavaKind();",
              "@Override",
              "public boolean isNull();",
              "@Override",
              "public boolean isCompressed();",
              "@Override",
              "public Constant compress();",
              "@Override",
              "public Constant uncompress();",
              "@Override",
              "public boolean isDefaultForKind();",
              "@Override",
              "public Object asBoxedPrimitive();",
              "@Override",
              "public int asInt();",
              "@Override",
              "public boolean asBoolean();",
              "@Override",
              "public long asLong();",
              "@Override",
              "public float asFloat();",
              "@Override",
              "public double asDouble();",
              "@Override",
              "public String toString();",
              "@Override",
              "public String toValueString();",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object o);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/VMIntrinsicMethod.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class VMIntrinsicMethod {",
            "methods": [
              "public final String declaringClass;",
              "public final String name;",
              "public final String descriptor;",
              "public final int id;",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotReferenceMap.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class HotSpotReferenceMap extends ReferenceMap {",
            "methods": [
              "@SuppressFBWarnings(value = \"EI_EXPOSE_REP2\", justification = \"caller transfers ownership of `objects`, `derivedBase` and `sizeInBytes`\")",
              "public HotSpotReferenceMap(Location[] objects, Location[] derivedBase, int[] sizeInBytes, int maxRegisterSize) {",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public String toString();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class HotSpotResolvedJavaMethodImpl extends HotSpotMethod implements HotSpotResolvedJavaMethod, MetaspaceHandleObject {",
            "methods": [
              "@Override",
              "public String getName();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object obj);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "public HotSpotResolvedObjectTypeImpl getDeclaringClass();",
              "long getMethodPointer();",
              "@Override",
              "public long getMetadataHandle();",
              "@Override",
              "public Constant getEncoding();",
              "public int getAllModifiers();",
              "@Override",
              "public int getModifiers();",
              "@Override",
              "public boolean canBeStaticallyBound();",
              "@Override",
              "public byte[] getCode();",
              "@Override",
              "public int getCodeSize();",
              "@Override",
              "public ExceptionHandler[] getExceptionHandlers();",
              "@Override",
              "public boolean isCallerSensitive();",
              "@Override",
              "public boolean isForceInline();",
              "@Override",
              "public boolean hasReservedStackAccess();",
              "@Override",
              "public void setNotInlinableOrCompilable();",
              "@Override",
              "public boolean ignoredBySecurityStackWalk();",
              "@Override",
              "public boolean isClassInitializer();",
              "@Override",
              "public boolean isConstructor();",
              "@Override",
              "public int getMaxLocals();",
              "@Override",
              "public int getMaxStackSize();",
              "@Override",
              "public StackTraceElement asStackTraceElement(int bci);",
              "@Override",
              "public ResolvedJavaMethod uniqueConcreteMethod(HotSpotResolvedObjectType receiver);",
              "@Override",
              "public HotSpotSignature getSignature();",
              "@Override",
              "public boolean hasCompiledCode();",
              "@Override",
              "public boolean hasCompiledCodeAtLevel(int level);",
              "@Override",
              "public ProfilingInfo getProfilingInfo(boolean includeNormal, boolean includeOSR);",
              "@Override",
              "public void reprofile();",
              "@Override",
              "public ConstantPool getConstantPool();",
              "@Override",
              "public Parameter[] getParameters();",
              "@Override",
              "public Annotation[][] getParameterAnnotations();",
              "@Override",
              "public Annotation[] getAnnotations();",
              "@Override",
              "public Annotation[] getDeclaredAnnotations();",
              "@Override",
              "public <T extends Annotation> T getAnnotation(Class<T> annotationClass);",
              "@Override",
              "public boolean isBridge();",
              "@Override",
              "public boolean isSynthetic();",
              "@Override",
              "public boolean isVarArgs();",
              "@Override",
              "public boolean isDefault();",
              "@Override",
              "public Type[] getGenericParameterTypes();",
              "@Override",
              "public boolean canBeInlined();",
              "@Override",
              "public boolean hasNeverInlineDirective();",
              "@Override",
              "public boolean shouldBeInlined();",
              "@Override",
              "public LineNumberTable getLineNumberTable();",
              "@Override",
              "public LocalVariableTable getLocalVariableTable();",
              "@Override",
              "public int vtableEntryOffset(ResolvedJavaType resolved);",
              "@Override",
              "public boolean isInVirtualMethodTable(ResolvedJavaType resolved);",
              "@Override",
              "public SpeculationLog getSpeculationLog();",
              "@Override",
              "public int intrinsicId();",
              "@Override",
              "public boolean isIntrinsicCandidate();",
              "@Override",
              "public int allocateCompileId(int entryBCI);",
              "@Override",
              "public boolean hasCodeAtLevel(int entryBCI, int level);",
              "@Override",
              "public int methodIdnum();",
              "@Override",
              "public AnnotationData getAnnotationData(ResolvedJavaType type);",
              "@Override",
              "public List<AnnotationData> getAnnotationData(ResolvedJavaType type1, ResolvedJavaType type2, ResolvedJavaType... types);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-21/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotMetaspaceConstantImpl.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class HotSpotMetaspaceConstantImpl implements HotSpotMetaspaceConstant, VMConstant {",
            "methods": [
              "static HotSpotMetaspaceConstantImpl forMetaspaceObject(MetaspaceObject metaspaceObject, boolean compressed);",
              "static MetaspaceObject getMetaspaceObject(Constant constant);",
              "@Override",
              "public int hashCode();",
              "@Override",
              "@Pure",
              "@EnsuresNonNullIf(expression = \"#1\", result = true)",
              "public boolean equals(@Nullable Object o);",
              "@Override",
              "public String toValueString();",
              "@Override",
              "public String toString();",
              "@Override",
              "public boolean isDefaultForKind();",
              "@Override",
              "public boolean isCompressed();",
              "@Override",
              "public Constant compress();",
              "@Override",
              "public Constant uncompress();",
              "@Override",
              "public HotSpotResolvedObjectType asResolvedJavaType();",
              "@Override",
              "public HotSpotResolvedJavaMethod asResolvedJavaMethod();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.vm.ci.hotspot;"
        ]
      }
    }
  }
}