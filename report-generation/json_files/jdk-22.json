{
  "jdk-22": {
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/jgss/GSSCredentialImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/jgss/GSSNameImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/jgss/spi/GSSNameSpi.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/jgss/krb5/Krb5NameElement.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/krb5/PrincipalName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/krb5/Realm.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddresses.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddress.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/org/ietf/jgss/GSSCredential.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/org/ietf/jgss/ChannelBinding.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/org/ietf/jgss/GSSName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/org/ietf/jgss/Oid.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/javax/security/auth/kerberos/KeyTab.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/javax/security/auth/kerberos/KerberosKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/javax/security/auth/kerberos/KerberosTicket.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.security.jgss/share/classes/javax/security/auth/kerberos/KerberosPrincipal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "public boolean equals(@Nullable Object obj);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.jfr/share/classes/jdk/jfr/internal/Type.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final Type STACK_TRACE;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.compiler/share/classes/javax/lang/model/util/Elements.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "default TypeElement getEnumConstantBody(VariableElement enumConstant);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.compiler/share/classes/javax/lang/model/element/RecordComponentElement.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "TypeMirror asType();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml/share/classes/javax/xml/catalog/CatalogImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public final NotFoundAction getResolve();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class ConstructorCallFinder extends TreeScanner {",
            "methods": [
              "List<JCMethodInvocation> find(JCMethodDecl meth);",
              "@Override",
              "public void visitApply(JCMethodInvocation invoke);",
              "@Override",
              "public void visitClassDef(JCClassDecl tree);",
              "@Override",
              "public void visitLambda(JCLambda tree);",
              "public static void mapSuperCalls(JCBlock block, Function<? super JCExpressionStatement, ? extends JCStatement> mapper);"
            ]
          },
          {
            "declaration": "private static class SuperCallTranslator extends TreeTranslator {",
            "methods": [
              "@Override",
              "public void visitExec(JCExpressionStatement stat);",
              "@Override",
              "public void visitClassDef(JCClassDecl tree);",
              "@Override",
              "public void visitLambda(JCLambda tree);"
            ]
          }
        ],
        "new_methods": [
          "public static boolean hasAnyConstructorCall(JCMethodDecl tree);",
          "public static boolean hasConstructorCall(JCMethodDecl tree, Name target);",
          "public static JCMethodInvocation findConstructorCall(JCMethodDecl md);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isImplicit();",
          "public Type implicitReceiverType();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "class DisjointChecker {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "class RefBeforeCtorCalledError extends StaticError {",
            "methods": [
              "@Override",
              "JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind, DiagnosticPosition pos, Symbol location, Type site, Name name, List<Type> argtypes, List<Type> typeargtypes);"
            ]
          }
        ],
        "new_methods": [
          "@Override",
          "Symbol access(Env<AttrContext> env, DiagnosticPosition pos, Symbol location, Symbol sym);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "public DSAParams getParams();",
          "@Override",
          "public ECParameterSpec getParams();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/unix/classes/sun/nio/ch/FileKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/unix/classes/sun/nio/fs/UnixPath.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public UnixPath resolve(Path first, Path... more);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/windows/classes/sun/nio/ch/FileKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/util/calendar/CalendarDate.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public sealed abstract class CalendarDate implements Cloneable permits BaseCalendar.Date {",
            "methods": [
              "@Override",
              "@Override",
              "@Override"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/util/calendar/ImmutableGregorianDate.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class ImmutableGregorianDate extends BaseCalendar.Date {",
            "methods": [
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override",
              "@Override"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/tools/keytool/Main.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class ExitException extends RuntimeException {",
            "methods": [
              "public ExitException(int errorCode) {",
              "public int run(String[] args, PrintStream out) throws Exception;"
            ]
          }
        ],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/util/BitArray.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/util/DerInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Date getTime() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/util/DerValue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Date getTime() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/X500Name.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/CRLExtensions.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/Extension.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/URIName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/DNSName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/X509Key.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/GeneralName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/X509CertInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/IPAddressName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/OIDName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/AVA.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/KeyIdentifier.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "public boolean equals(@Nullable Object obj);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/EDIPartyName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/PolicyInformation.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/OtherName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/CertificatePolicyId.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/DistributionPointName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/CertificateExtensions.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/RFC822Name.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/DistributionPoint.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/x509/GeneralSubtree.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/jca/ProviderConfig.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/pkcs10/PKCS10.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/pkcs10/PKCS10Attributes.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/security/pkcs/EncryptedPrivateKeyInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private sealed abstract static class Unmapper implements Runnable, UnmapperProxy {",
            "methods": []
          },
          {
            "declaration": "private static final class DefaultUnmapper extends Unmapper {",
            "methods": []
          },
          {
            "declaration": "private static final class SyncUnmapper extends Unmapper {",
            "methods": [
              "@Override",
              "@Override",
              "@Override"
            ]
          }
        ],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/Inet4Address.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static Inet4Address ofLiteral(String ipv4AddressLiteral);",
          "static Inet4Address parseAddressString(String addressLiteral, boolean throwIAE);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/ProxySelector.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public List<Proxy> select(URI uri);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/URLPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/Inet6Address.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static InetAddress ofLiteral(String ipv6AddressLiteral);",
          "static InetAddress parseAddressString(String addressLiteral, boolean removeSqBrackets) throws UnknownHostException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/NetworkInterface.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/net/InetAddress.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static InetAddress ofLiteral(String ipAddressLiteral);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/BitSet.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/Calendar.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Pure"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/DualPivotQuicksort.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@FunctionalInterface",
          "private static interface SortOperation<A> {",
          "void sort(A a, int low, int high);",
          "@FunctionalInterface",
          "interface PartitionOperation<A> {",
          "int[] partition(A a, int low, int high, int pivotIndex1, int pivotIndex2);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/AbstractMap.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class KeyIterator implements Iterator<K> {",
            "methods": [
              "public boolean hasNext();",
              "public void remove();",
              "public K next();"
            ]
          },
          {
            "declaration": "final class ValueIterator implements Iterator<V> {",
            "methods": [
              "public boolean hasNext();",
              "public void remove();",
              "public V next();"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/stream/Stream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@PreviewFeature(feature = PreviewFeature.Feature.STREAM_GATHERERS)",
          "default <R> Stream<R> gather(Gatherer<? super T, ?, R> gatherer);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/zip/ZipFile.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static boolean getDisableZip64ExtraFieldValidation();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/concurrent/ForkJoinPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static long slotOffset(int index);",
          "final void updateBase(int v);",
          "final void updateTop(int v);",
          "final void forgetSource();",
          "final void updateArray(ForkJoinTask<?>[] a);",
          "final void unlockPhase();",
          "final boolean tryLockPhase();",
          "final void push(ForkJoinTask<?> task, ForkJoinPool pool, boolean internal);",
          "final boolean tryUnpush(ForkJoinTask<?> task, boolean internal);",
          "final void topLevelExec(ForkJoinTask<?> task, WorkQueue src, int srcId);",
          "final void tryRemoveAndExec(ForkJoinTask<?> task, boolean internal);",
          "final int helpComplete(ForkJoinTask<?> task, boolean internal, int limit);",
          "static boolean poolIsStopping(ForkJoinPool p);",
          "final void signalWork(ForkJoinTask<?>[] a, int k);",
          "final int helpJoin(ForkJoinTask<?> task, WorkQueue w, boolean internal);",
          "final int helpComplete(ForkJoinTask<?> task, WorkQueue w, boolean internal);",
          "final WorkQueue externalSubmissionQueue();",
          "static WorkQueue externalQueue(ForkJoinPool p);",
          "public <T> List<Future<T>> invokeAllUninterruptibly(Collection<? extends Callable<T>> tasks);",
          "@Override",
          "public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException;",
          "final long beginCompensatedBlock();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/concurrent/ForkJoinTask.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static final class AdaptedCallable<T> extends ForkJoinTask<T> implements RunnableFuture<T> {",
            "methods": [
              "public final T getRawResult();",
              "public final void setRawResult(T v);",
              "public final boolean exec();",
              "public final void run();",
              "public String toString();"
            ]
          },
          {
            "declaration": "static abstract class InterruptibleTask<T> extends ForkJoinTask<T> implements RunnableFuture<T> {",
            "methods": [
              "abstract T compute() throws Exception;",
              "public final boolean exec();",
              "public boolean cancel(boolean mayInterruptIfRunning);",
              "public final void run();",
              "Object adaptee();",
              "public String toString();"
            ]
          },
          {
            "declaration": "static final class AdaptedInterruptibleCallable<T> extends InterruptibleTask<T> {",
            "methods": [
              "public final T getRawResult();",
              "public final void setRawResult(T v);",
              "final T compute() throws Exception;",
              "final Object adaptee();"
            ]
          },
          {
            "declaration": "static final class AdaptedInterruptibleRunnable<T> extends InterruptibleTask<T> {",
            "methods": [
              "public final T getRawResult();",
              "public final void setRawResult(T v);",
              "final T compute();",
              "final Object adaptee();"
            ]
          },
          {
            "declaration": "static final class RunnableExecuteAction extends InterruptibleTask<Void> {",
            "methods": [
              "final Void compute();",
              "final Object adaptee();",
              "void onAuxExceptionSet(Throwable ex);",
              "@SuppressWarnings(\"serial\")"
            ]
          },
          {
            "declaration": "static final class InvokeAnyRoot<T> extends InterruptibleTask<T> {",
            "methods": [
              "final void tryComplete(InvokeAnyTask<T> f, T v, Throwable ex, boolean completed);",
              "public final T compute();",
              "public final T getRawResult();",
              "public final void setRawResult(T v);",
              "final T invokeAny(Collection<? extends Callable<T>> tasks, ForkJoinPool pool, boolean timed, long nanos) throws InterruptedException, ExecutionException, TimeoutException;",
              "@SuppressWarnings(\"serial\")"
            ]
          },
          {
            "declaration": "static final class InvokeAnyTask<T> extends InterruptibleTask<Void> {",
            "methods": [
              "final Void compute() throws Exception;",
              "final void onRootCompletion();",
              "public final Void getRawResult();",
              "public final void setRawResult(Void v);",
              "final Object adaptee();"
            ]
          }
        ],
        "new_methods": [
          "final int trySetCancelled();",
          "final boolean trySetThrown(Throwable ex);",
          "void onAuxExceptionSet(Throwable ex);",
          "final void trySetException(Throwable ex);",
          "final void doExec();",
          "final int setForkJoinTaskStatusMarkerBit();",
          "final int getForkJoinTaskStatusMarkerBit();",
          "public ForkJoinTask() {",
          "final void quietlyJoinPoolInvokeAllTask(long deadline) throws InterruptedException;",
          "public static ForkJoinTask<?> adapt(Runnable runnable);",
          "public static <T> ForkJoinTask<T> adapt(Runnable runnable, T result);",
          "public static <T> ForkJoinTask<T> adapt(Callable<? extends T> callable);",
          "public static <T> ForkJoinTask<T> adaptInterruptible(Callable<? extends T> callable);",
          "public static <T> ForkJoinTask<T> adaptInterruptible(Runnable runnable, T result);",
          "public static ForkJoinTask<?> adaptInterruptible(Runnable runnable);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/concurrent/LinkedTransferQueue.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static final class DualNode implements ForkJoinPool.ManagedBlocker {",
            "methods": [
              "final Object cmpExItem(Object cmp, Object val);",
              "final DualNode cmpExNext(DualNode cmp, DualNode val);",
              "final boolean matched();",
              "final void selfLinkItem();",
              "final Object await(Object e, long ns, Object blocker, boolean spin);",
              "final DualNode cmpExTail(DualNode cmp, DualNode val);",
              "final DualNode cmpExHead(DualNode cmp, DualNode val);",
              "final boolean sweepNow();",
              "final Object xfer(Object e, long ns);",
              "final boolean tryCasSuccessor(DualNode pred, DualNode c, DualNode p);",
              "final DualNode skipDeadNodes(DualNode pred, DualNode c, DualNode p, DualNode q);",
              "final boolean tryMatchData(DualNode p, Object x);",
              "final DualNode firstDataNode();",
              "final int countOfMode(boolean data);"
            ]
          }
        ],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "void forEachFrom(Consumer<? super E> action, DualNode p);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/util/concurrent/SynchronousQueue.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static final class Transferer<E> extends LinkedTransferQueue<E> {",
            "methods": [
              "final Object xferLifo(Object e, long ns);",
              "@SuppressWarnings(\"unchecked\")",
              "@SuppressWarnings(\"unchecked\")",
              "@SuppressWarnings(\"unchecked\")"
            ]
          }
        ],
        "new_methods": [
          "@SuppressWarnings(\"serial\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/AccessControlContext.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/Principal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/CodeSigner.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/AllPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/spec/ECFieldFp.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/spec/ECFieldF2m.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/spec/ECPoint.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/cert/Certificate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/cert/X509CRL.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/cert/X509CRLEntry.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/cert/CertPath.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/security/interfaces/ECPrivateKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "default ECParameterSpec getParams();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/io/FileDescriptor.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void sync() throws SyncFailedException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/io/RandomAccessFile.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public RandomAccessFile(String pathname, String mode) throws FileNotFoundException {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/io/Console.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isTerminal();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Integer.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class IntegerCache {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/StackStreamFactory.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static class StackFrameTraverser<T> extends AbstractStackWalker<T, StackFrame> implements Spliterator<StackFrame> {",
            "methods": [
              "protected int batchSize(int lastBatchSize);"
            ]
          },
          {
            "declaration": "static class StackFrameBuffer<T extends ClassFrameInfo> extends FrameBuffer<T> {",
            "methods": [
              "@Override",
              "T[] frames();",
              "@SuppressWarnings(\"unchecked\")",
              "T[] allocateArray(int size);",
              "T[] fill(T[] array, int startIndex, int size);",
              "@Override",
              "void resize(int size);",
              "@Override",
              "T nextStackFrame();",
              "@Override",
              "final Class<?> at(int index);"
            ]
          },
          {
            "declaration": "static class ClassFrameBuffer extends StackFrameBuffer<ClassFrameInfo> {",
            "methods": [
              "@Override",
              "ClassFrameInfo[] allocateArray(int size);",
              "@Override",
              "ClassFrameInfo[] fill(ClassFrameInfo[] array, int startIndex, int size);"
            ]
          },
          {
            "declaration": "static final class CallerClassFinder extends AbstractStackWalker<Integer, ClassFrameInfo> {",
            "methods": [
              "protected int batchSize(int lastBatchSize);"
            ]
          }
        ],
        "new_methods": [
          "protected final int mode;",
          "protected abstract int batchSize(int lastBatchSize);",
          "abstract void resize(int size);",
          "final int currentBatchSize();",
          "final int numFrames();",
          "final boolean isFull();",
          "final void setBatch(int depth, int startIndex, int numFrames);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Byte.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class ByteCache {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Short.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class ShortCache {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Long.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class LongCache {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Class.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static Class<?> forPrimitiveName(String primitiveName);",
          "Method findMethod(boolean publicOnly, String name, Class<?>... parameterTypes);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/String.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean bytesCompatible(Charset charset);",
          "void copyToSegmentRaw(MemorySegment segment, long offset);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Character.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class CharacterCache {",
            "methods": []
          }
        ],
        "new_methods": [
          "public static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_I;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/StackWalker.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "RETAIN_CLASS_REFERENCE, DROP_METHOD_INFO, SHOW_REFLECT_FRAMES, SHOW_HIDDEN_FRAMES",
          "static StackWalker newInstance(Set<Option> options, ContinuationScope contScope);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/Thread.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Hidden",
          "@ForceInline",
          "final void runWith(Object bindings, Runnable op);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/invoke/MethodHandles.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "MethodHandle serializableConstructor(Class<?> decl, Constructor<?> c) throws IllegalAccessException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/lang/reflect/ReflectAccess.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Class<?>[] getExecutableSharedExceptionTypes(Executable ex);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/nio/file/Path.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "default Path resolve(Path first, Path... more);",
          "default Path resolve(String first, String... more);",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/nio/charset/Charset.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/DateFormatSymbols.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/MessageFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/RuleBasedCollator.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/ChoiceFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/ParsePosition.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/AttributedString.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/java/text/FieldPosition.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/CryptoAllPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/CryptoPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/CryptoPolicyParser.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/spec/SecretKeySpec.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/spec/RC2ParameterSpec.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/crypto/spec/RC5ParameterSpec.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/security/auth/Subject.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/security/auth/PrivateCredentialPermission.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/security/auth/x500/X500Principal.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/javax/security/cert/Certificate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean equals(@Nullable Object obj);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/PBEKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "public boolean isDestroyed();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/PBKDF2KeyImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/DHPrivateKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/DHPublicKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/DESedeKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.base/share/classes/com/sun/crypto/provider/DESKey.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.net.http/share/classes/jdk/internal/net/http/ConnectionPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void returnToPool(HttpConnection conn, Deadline now, long keepAlive);",
          "long purgeExpiredConnectionsAndReturnNextDeadline(Deadline now);",
          "Optional<Deadline> nextExpiryDeadline();",
          "void add(HttpConnection conn, Deadline now, long keepAlive);",
          "List<HttpConnection> purgeUntil(Deadline now);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.naming/share/classes/com/sun/jndi/ldap/pool/ConnectionDesc.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean release();",
          "PooledConnection tryUse();",
          "boolean expire(long threshold);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriter.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class ClassWriter extends SubWriterHolderWriter {",
            "methods": [
              "protected final TypeElement typeElement;",
              "protected final ClassTree classTree;",
              "protected final PropertyUtils.PropertyHelper pHelper;",
              "public ClassWriter(HtmlConfiguration configuration, TypeElement typeElement, ClassTree classTree) {",
              "@Override",
              "public PropertyUtils.PropertyHelper getPropertyHelper();",
              "@Override",
              "public void buildPage() throws DocletException;",
              "protected void buildClassDoc() throws DocletException;",
              "protected void buildClassTree(Content classContent);",
              "protected void buildClassInfo(Content target);",
              "protected void buildParamInfo(Content target);",
              "protected void buildSuperInterfacesInfo(Content target);",
              "protected void buildImplementedInterfacesInfo(Content target);",
              "protected void buildSubClassInfo(Content target);",
              "protected void buildSubInterfacesInfo(Content target);",
              "protected void buildInterfaceUsageInfo(Content target);",
              "protected void buildFunctionalInterfaceInfo(Content target);",
              "protected void buildDeprecationInfo(Content target);",
              "protected void buildNestedClassInfo(Content target);",
              "protected void buildClassSignature(Content target);",
              "protected void buildClassDescription(Content target);",
              "protected void buildClassTagInfo(Content target);",
              "protected void buildMemberSummary(Content classContent);",
              "protected void buildMemberDetails(Content classContent);",
              "protected Content getHeader(String header);",
              "protected Content getClassContentHeader();",
              "@Override",
              "protected Navigation getNavBar(PageMode pageMode, Element element);",
              "protected void addFooter();",
              "protected void printDocument(Content content) throws DocFileIOException;",
              "protected Content getClassInfo(Content classInfo);",
              "@Override",
              "public TypeElement getCurrentPageElement();",
              "protected void addClassSignature(Content classInfo);",
              "protected void addClassDescription(Content classInfo);",
              "protected void addClassTagInfo(Content classInfo);",
              "protected void addClassTree(Content target);",
              "protected void addParamInfo(Content target);",
              "protected void addSubClassInfo(Content target);",
              "protected void addSubInterfacesInfo(Content target);",
              "protected void addInterfaceUsageInfo(Content target);",
              "protected void addImplementedInterfacesInfo(Content target);",
              "protected void addSuperInterfacesInfo(Content target);",
              "protected void addNestedClassInfo(final Content target);",
              "protected void addFunctionalInterfaceInfo(Content target);",
              "protected void addClassDeprecationInfo(Content classInfo);",
              "public TypeElement getTypeElement();",
              "protected Content getMemberDetails(Content content);",
              "@Override",
              "public boolean isIndexable();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlDocletWriter.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class HtmlDocletWriter {",
            "methods": [
              "public final Messages messages;",
              "public final Links links;",
              "public final Map<String, Integer> indexAnchorTable;",
              "protected HtmlDocletWriter(HtmlConfiguration configuration, DocPath path, boolean generating) {",
              "public abstract void buildPage() throws DocletException;",
              "protected final void writeGenerating();",
              "public TagletWriter getTagletWriterInstance(TagletWriter.Context context);",
              "public boolean isIndexable();",
              "protected Content getHeader(Navigation.PageMode pageMode);",
              "protected Content getHeader(Navigation.PageMode pageMode, Element element);",
              "public TypeElement getCurrentPageElement();",
              "public Content commentTagsToContent(Element element, List<? extends DocTree> trees, TagletWriter.Context context);",
              "public Content invalidTagOutput(String summary, Optional<Content> detail);",
              "public void addRestrictedSummary(Element forWhat, Content target);",
              "public void addRestrictedInfo(ExecutableElement forWhat, Content target);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriter.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class ModuleWriter extends HtmlDocletWriter {",
            "methods": [
              "protected ModuleElement mdle;"
            ]
          },
          {
            "declaration": "static class PackageEntry {",
            "methods": [
              "public ModuleWriter(HtmlConfiguration configuration, ModuleElement mdle) {",
              "@Override",
              "public void buildPage() throws DocletException;",
              "protected void buildModuleDoc() throws DocletException;",
              "protected void buildContent();",
              "protected void buildSummary(Content target);",
              "protected void buildModulesSummary(Content summariesList);",
              "protected void buildPackagesSummary(Content summariesList);",
              "protected void buildServicesSummary(Content summariesList);",
              "protected void buildModuleDescription(Content moduleContent);",
              "protected Content getModuleHeader(String heading);",
              "@Override",
              "protected Navigation getNavBar(PageMode pageMode, Element element);",
              "protected Content getContentHeader();",
              "protected Content getSummariesList();",
              "protected Content getSummary(Content source);",
              "public void computeModulesData();",
              "public boolean shouldDocument(Element element);",
              "public boolean display(Set<? extends Element> section);",
              "public boolean display(Map<? extends Element, ?> section);",
              "public void addSummaryHeader(Content startMarker, Content heading, Content target);",
              "protected void addModulesSummary(Content summariesList);",
              "protected void addPackagesSummary(Content summariesList);",
              "public void addPackageSummary(HtmlTree li);",
              "public void addIndirectPackages(Table<?> table, Map<ModuleElement, SortedSet<PackageElement>> ip);",
              "protected void addServicesSummary(Content summariesList);",
              "public void addUsesList(Table<?> table);",
              "public void addProvidesList(Table<?> table);",
              "public void addDeprecationInfo(Content div);",
              "protected void addModuleDescription(Content moduleContent);",
              "protected void addModuleSignature(Content moduleContent);",
              "protected void addModuleContent(Content source);",
              "protected void addModuleFooter();",
              "protected void printDocument(Content content) throws DocFileIOException;",
              "public void addPackageDeprecationInfo(Content li, PackageElement pkg);",
              "@Override",
              "public boolean isIndexable();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/TreeWriter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public TreeWriter(HtmlConfiguration configuration, ClassTree classTree) {",
          "@Override",
          "public void buildPage() throws DocFileIOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/Content.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class Content {",
            "methods": [
              "@Override",
              "public String toString();",
              "public Content add(Content content);",
              "public Content add(CharSequence stringContent);",
              "public <T> Content addAll(Collection<T> items, Function<T, Content> mapper);",
              "public abstract boolean write(Writer writer, String newline, boolean atNewline) throws IOException;",
              "public abstract boolean isEmpty();",
              "@Pure",
              "public boolean isDiscardable();",
              "public int charCount();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlConfiguration.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public HtmlIndexBuilder indexBuilder;",
          "protected RestrictedAPIListBuilder restrictedAPIListBuilder;",
          "public final Messages messages;",
          "public TagletManager tagletManager;",
          "RESTRICTED,",
          "@Override",
          "public Set<PackageElement> getContainingPackagesSeen();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/taglets/BaseTaglet.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class BaseTaglet implements Taglet {",
            "methods": [
              "protected final HtmlConfiguration config;",
              "protected final Messages messages;",
              "protected final Resources resources;",
              "protected final Utils utils;",
              "protected final DocTree.Kind tagKind;",
              "protected final String name;",
              "protected TagletWriter tagletWriter;",
              "public BaseTaglet(HtmlConfiguration config, DocTree.Kind tagKind, boolean inline, Set<Location> sites) {",
              "protected BaseTaglet(HtmlConfiguration config, String name, boolean inline, Set<Location> sites) {",
              "@Override",
              "public Set<Location> getAllowedLocations();",
              "@Override",
              "@Pure",
              "public final boolean isInlineTag();",
              "@Override",
              "public String getName();",
              "public DocTree.Kind getTagKind();",
              "@Override",
              "public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter tagletWriter);",
              "@Override",
              "public Content getAllBlockTagOutput(Element holder, TagletWriter tagletWriter);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html.taglets;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/taglets/UserTaglet.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public final class UserTaglet implements Taglet {",
            "methods": [
              "@Override",
              "public Set<jdk.javadoc.doclet.Taglet.Location> getAllowedLocations();",
              "@Override",
              "@Pure",
              "public boolean isInlineTag();",
              "@Override",
              "public boolean isBlockTag();",
              "@Override",
              "public String getName();",
              "@Override",
              "public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter tagletWriter);",
              "@Override",
              "public Content getAllBlockTagOutput(Element holder, TagletWriter tagletWriter);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html.taglets;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/taglets/TagletManager.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class TagletManager {",
            "methods": [
              "public TagletManager(HtmlConfiguration config) {",
              "public Set<String> getAllTagletNames();",
              "public void initTagletPath(JavaFileManager fileManager) throws IOException;",
              "public void addCustomTag(String classname, JavaFileManager fileManager);",
              "public void loadTaglets(JavaFileManager fileManager) throws IOException;",
              "public void addNewSimpleCustomTag(String tagName, String header, String locations);",
              "void seenTag(String name);",
              "public void checkTags(Element element, Iterable<? extends DocTree> trees);",
              "Map<String, Taglet> getInlineTaglets();",
              "public List<Taglet> getSerializedFormTaglets();",
              "@SuppressWarnings(\"fallthrough\")",
              "public List<Taglet> getBlockTaglets(Element e);",
              "@Pure",
              "public boolean isKnownCustomTag(String tagName);",
              "public void printReport();",
              "Taglet getTaglet(String name);",
              "public Taglet getTaglet(DocTree.Kind kind);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html.taglets;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/taglets/SimpleTaglet.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class SimpleTaglet extends BaseTaglet implements InheritableTaglet {",
            "methods": [
              "protected SimpleTaglet(HtmlConfiguration config, DocTree.Kind tagKind, String header, Set<Taglet.Location> locations, boolean enabled) {",
              "@Override",
              "public Output inherit(Element dst, Element src, DocTree tag, boolean isFirstSentence);",
              "boolean isEnabled();",
              "record Documentation(DocTree tag, List<? extends DocTree> description, ExecutableElement method) {",
              "@Override",
              "public Content getAllBlockTagOutput(Element holder, TagletWriter tagletWriter);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.doclets.formats.html.taglets;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/WorkArounds.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isRestrictedAPI(Element el);",
          "public static boolean isImplicitlyDeclaredClass(Element e);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/PropertyUtils.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public static class PropertyHelper {",
            "methods": [
              "public PropertyHelper(BaseConfiguration configuration, TypeElement typeElement) {",
              "public Element getPropertyElement(Element element);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public R visitInheritDoc(InheritDocTree node, Void p);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private class Overrides implements Iterator<ExecutableElement> {",
            "methods": [
              "public Overrides(ExecutableElement method) {",
              "@Override",
              "public boolean hasNext();",
              "@Override",
              "public ExecutableElement next();",
              "public static String diagnosticDescriptionOf(Element e);"
            ]
          }
        ],
        "new_methods": [
          "public boolean isFunctionalInterface(TypeElement typeElement);",
          "@Pure",
          "public List<? extends BlockTagTree> getBlockTags(Element element, Predicate<? super BlockTagTree> filter);",
          "public <T extends BlockTagTree> List<T> getBlockTags(Element element, Predicate<? super BlockTagTree> filter, Class<T> tClass);",
          "public List<? extends BlockTagTree> getBlockTags(Element element, DocTree.Kind kind);",
          "public <T extends BlockTagTree> List<? extends T> getBlockTags(Element element, DocTree.Kind kind, Class<T> tClass);",
          "public List<? extends BlockTagTree> getBlockTags(Element element, String tagName);",
          "public boolean isRestrictedAPI(Element el);",
          "DEPRECATED, PREVIEW, RESTRICTED"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ElementsTable.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public AccessLevel getAccessValue(ElementKind kind);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.desktop/share/classes/javax/swing/UIDefaults.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "String composeKey(String key, int reduce, String suffix);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.desktop/share/classes/javax/swing/JFileChooser.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@BeanProperty(expert = true, description = \"Sets the FileSystemView used to get filesystem information.\")",
          "@Override",
          "public void setEnabled(boolean enabled);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMReference.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMSignatureProperty.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMRetrievalMethod.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMKeyValue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMTransform.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMKeyInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMDigestMethod.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMX509IssuerSerial.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMXMLSignature.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMKeyName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMSubTreeData.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMSignedInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMSignatureProperties.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMXMLObject.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMX509Data.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/org/jcp/xml/dsig/internal/dom/DOMManifest.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/signature/Reference.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/signature/reference/ReferenceSubTreeData.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/utils/DigesterOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "public synchronized void write(int arg0);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/utils/SignerOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/utils/UnsyncByteArrayOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/KeyInfo.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/keyresolver/KeyResolver.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/content/X509Data.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/content/x509/XMLX509Certificate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/content/x509/XMLX509SubjectName.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/content/x509/XMLX509SKI.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/content/x509/XMLX509IssuerSerial.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/storage/StorageResolver.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/storage/implementations/KeyStoreResolver.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/java.xml.crypto/share/classes/com/sun/org/apache/xml/internal/security/keys/storage/implementations/SingleCertificateResolver.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/VMIntrinsicMethod.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public final boolean isAvailable;",
          "public final boolean c1Supported;",
          "public final boolean c2Supported;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-22/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public BitSet getOopMapAt(int bci);"
        ]
      }
    }
  }
}