{
  "jdk-24": {
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.management/share/classes/java/lang/management/ManagementFactory.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"doclint:reference\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.management/share/classes/javax/management/openmbean/OpenMBeanAttributeInfoSupport.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/impl/xpath/regex/RegularExpression.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "boolean claim();",
          "void release();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.xml/share/classes/com/sun/org/apache/xalan/internal/xsltc/compiler/util/ErrorMsg.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final String UNSUPPORTED_EXT_FUNC_ERR;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/file/JavacFileManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public ArchiveContainer(Path archivePath) throws IOException, ProviderNotFoundException {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public ErrorType(Type originalType, TypeSymbol tsym, List<TypeMetadata> metadata) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public ClassSymbol innermostAccessibleEnclosingClass();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public static class FunctionDescriptorLookupError extends CompilerInternalException {",
            "methods": []
          },
          {
            "declaration": "public abstract class SignatureGenerator {",
            "methods": []
          },
          {
            "declaration": "public class InvalidSignatureException extends CompilerInternalException {",
            "methods": []
          }
        ],
        "new_methods": [
          "public final boolean dumpStacktraceOnError;",
          "boolean areDisjoint(ClassSymbol csym, List<Type> permittedSubtypes);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public static class InapplicableMethodException extends CompilerInternalException {",
            "methods": []
          },
          {
            "declaration": "abstract class ReferenceLookupHelper extends LookupHelper {",
            "methods": [
              "ReferenceLookupHelper unboundLookup(InferenceContext inferenceContext);",
              "abstract JCMemberReference.ReferenceKind referenceKind(Symbol sym);",
              "Symbol access(Env<AttrContext> env, DiagnosticPosition pos, Symbol location, Symbol sym);"
            ]
          },
          {
            "declaration": "class MethodReferenceLookupHelper extends ReferenceLookupHelper {",
            "methods": [
              "@Override",
              "@Override",
              "ReferenceLookupHelper unboundLookup(InferenceContext inferenceContext);",
              "@Override",
              "ReferenceKind referenceKind(Symbol sym);"
            ]
          },
          {
            "declaration": "class UnboundMethodReferenceLookupHelper extends MethodReferenceLookupHelper {",
            "methods": [
              "@Override"
            ]
          },
          {
            "declaration": "class ArrayConstructorReferenceLookupHelper extends ReferenceLookupHelper {",
            "methods": [
              "protected Symbol lookup(Env<AttrContext> env, MethodResolutionPhase phase);"
            ]
          },
          {
            "declaration": "class ConstructorReferenceLookupHelper extends ReferenceLookupHelper {",
            "methods": [
              "Symbol findSelfContaining(DiagnosticPosition pos, Env<AttrContext> env, TypeSymbol c, boolean isSuper);",
              "Symbol findLocalClassOwner(Env<AttrContext> env, TypeSymbol c);"
            ]
          },
          {
            "declaration": "class BadLocalClassCreation extends StaticError {",
            "methods": [
              "@Override",
              "JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind, DiagnosticPosition pos, Symbol location, Type site, Name name, List<Type> argtypes, List<Type> typeargtypes);"
            ]
          }
        ],
        "new_methods": [
          "Symbol access(Env<AttrContext> env, DiagnosticPosition pos, Symbol location, Symbol sym);",
          "@Override",
          "void debug(DiagnosticPosition pos, Symbol sym);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.compiler/share/classes/com/sun/tools/javac/api/JavacScope.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public ScopeType getScopeType();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.logging/share/classes/java/util/logging/Handler.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public abstract void close();",
          "public synchronized void setFormatter(Formatter newFormatter);",
          "public synchronized void setEncoding(@Nullable String encoding) throws java.io.UnsupportedEncodingException;",
          "public synchronized void setFilter(@Nullable Filter newFilter);",
          "public synchronized void setErrorManager(ErrorManager em);",
          "public synchronized void setLevel(Level newLevel);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.logging/share/classes/java/util/logging/Logger.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void setFilter(@GuardSatisfied Logger this, @Nullable Filter newFilter);",
          "public void setLevel(@GuardSatisfied Logger this, @Nullable Level newLevel);",
          "public void addHandler(@GuardSatisfied Logger this, Handler handler);",
          "public void removeHandler(@GuardSatisfied Logger this, @Nullable Handler handler);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.logging/share/classes/java/util/logging/LogManager.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class LoggingProviderAccess implements LoggingProviderImpl.LogManagerAccess {",
            "methods": []
          }
        ],
        "new_methods": [
          "public void readConfiguration() throws IOException;",
          "String getConfigurationFileName();",
          "public void reset();",
          "public void readConfiguration(InputStream ins) throws IOException;",
          "public void checkAccess();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/sun/net/www/MessageHeader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public MessageHeader(int maxHeaderSize) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/sun/security/ssl/SSLSessionImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "byte[] incrTicketNonceCounter();",
          "public boolean isPSK();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "int available() throws IOException;",
          "boolean isOther() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/sun/nio/ch/FileDispatcher.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "abstract int available(FileDescriptor fd) throws IOException;",
          "abstract boolean isOther(FileDescriptor fd) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/net/URLClassLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/net/NetworkInterface.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public List<InterfaceAddress> getInterfaceAddresses();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/net/InetAddress.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static InetAddress[] getAllByName0(String host) throws UnknownHostException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/ArrayList.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public void sort(Comparator<? super E> c);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/Locale.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class LocaleCache implements Function<Object, Locale> {",
            "methods": [
              "public static Locale cache(Object key);",
              "@Override",
              "public Locale apply(Object key);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/Formatter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "private record FixedString(String s, int start, int end) implements FormatString {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/zip/ZipEntry.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static boolean isCENHeaderValid(String name, byte[] extra, String comment);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/zip/ZipFile.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static record EntryPos(String name, int pos) {"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/zip/ZipCoder.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "byte compare(String str, byte[] b, int off, int len, boolean matchDirectory);",
          "byte compare(String str, byte[] b, int off, int len, boolean matchDirectory);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/zip/ZipUtils.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final long get64S(byte[] b, int off);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/concurrent/Exchanger.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "static final class Slot {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/concurrent/ForkJoinPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "final void topLevelExec(ForkJoinTask<?> task, int fifo);",
          "final void cancelTasks();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/concurrent/atomic/AtomicReferenceArray.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/util/concurrent/atomic/AtomicReference.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")",
          "@SuppressWarnings(\"unchecked\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/security/Security.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static final class SecPropLoader {",
            "methods": [
              "static void loadAll();",
              "static boolean isInclude(String key);",
              "static void checkReservedKey(String key) throws IllegalArgumentException;",
              "static void loadInclude(String propFile);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/security/Policy.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean isReadOnly();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/ObjectInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "protected ObjectInputStream() throws IOException {",
          "protected boolean enableResolveObject(boolean enable);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/ObjectOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "protected ObjectOutputStream() throws IOException {",
          "protected boolean enableReplaceObject(boolean enable);",
          "@SuppressWarnings(\"deprecation\")",
          "void writeBytes(String s, int len) throws IOException;",
          "public void writeUTF(String str) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/DataOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"deprecation\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/PushbackInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public synchronized void close() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/BufferedWriter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"try\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/BufferedInputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public synchronized int read(byte[] b, @IndexOrHigh({ \"#1\" }) int off, @LTLengthOf(value = { \"#1\" }, offset = { \"#2 - 1\" }) @NonNegative int len) throws IOException;",
          "public synchronized long skip(long n) throws IOException;",
          "public synchronized int available() throws IOException;",
          "public synchronized void mark(int readlimit);",
          "public synchronized void reset() throws IOException;",
          "public synchronized long transferTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/Reader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static Reader of(final CharSequence cs);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/BufferedOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public synchronized void write(@PolySigned int b) throws IOException;",
          "public synchronized void flush() throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/Console.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Console println();",
          "@PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)",
          "@PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)",
          "public String readln();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/io/ByteArrayOutputStream.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public synchronized void writeTo(OutputStream out) throws IOException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/math/BigInteger.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static int bitLengthForLong(long n);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/math/MutableBigInteger.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void shiftAdd(MutableBigInteger addend, int n);",
          "void shiftAddDisjoint(MutableBigInteger addend, int n);",
          "MutableBigInteger[] sqrtRem(boolean needRemainder);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/time/LocalDateTime.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void formatTo(StringBuilder buf);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/time/LocalTime.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void formatTo(StringBuilder buf);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/time/LocalDate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void formatTo(StringBuilder buf);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/System.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Restricted",
          "@Restricted",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Process.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean waitFor(Duration duration) throws InterruptedException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Float.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Class.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class Holder {",
            "methods": [
              "ProtectionDomain protectionDomain();",
              "static native <T> Class<T> getPrimitiveClass(String name);"
            ]
          }
        ],
        "new_methods": [
          "public Object @Nullable [] getSigners();",
          "void setSigners(Object[] signers);",
          "public Method getEnclosingMethod();",
          "public Constructor<? extends Object> getEnclosingConstructor();",
          "public Class<? extends Object> getDeclaringClass();",
          "public Class<? extends Object> getEnclosingClass();",
          "public Class<? extends Object>[] getClasses();",
          "public Field[] getFields();",
          "public Method[] getMethods();",
          "public Constructor<? extends Object>[] getConstructors();",
          "public Field getField(String name) throws NoSuchFieldException;",
          "@Pure",
          "@GetMethod",
          "public Method getMethod(String name, Class<?>@Nullable ... parameterTypes) throws NoSuchMethodException;",
          "@GetConstructor",
          "@Pure",
          "public Constructor<T> getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException;",
          "public Class<? extends Object>[] getDeclaredClasses();",
          "public Field[] getDeclaredFields();",
          "public RecordComponent[] getRecordComponents();",
          "public Method[] getDeclaredMethods();",
          "public Constructor<?>[] getDeclaredConstructors();",
          "public Field getDeclaredField(String name) throws NoSuchFieldException;",
          "@GetMethod",
          "public Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException;",
          "List<Method> getDeclaredPublicMethods(String name, Class<?>... parameterTypes);",
          "Method findMethod(boolean publicOnly, String name, Class<?>... parameterTypes);",
          "public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException;",
          "@Nullable",
          "public InputStream getResourceAsStream(String name);",
          "public ProtectionDomain getProtectionDomain();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Character.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static final UnicodeBlock TODHRI;",
          "public static final UnicodeBlock GARAY;",
          "public static final UnicodeBlock TULU_TIGALARI;",
          "public static final UnicodeBlock MYANMAR_EXTENDED_C;",
          "public static final UnicodeBlock SUNUWAR;",
          "public static final UnicodeBlock EGYPTIAN_HIEROGLYPHS_EXTENDED_A;",
          "public static final UnicodeBlock GURUNG_KHEMA;",
          "public static final UnicodeBlock KIRAT_RAI;",
          "public static final UnicodeBlock SYMBOLS_FOR_LEGACY_COMPUTING_SUPPLEMENT;",
          "public static final UnicodeBlock OL_ONAL;",
          "TODHRI,",
          "GARAY,",
          "TULU_TIGALARI,",
          "SUNUWAR,",
          "GURUNG_KHEMA,",
          "KIRAT_RAI,",
          "OL_ONAL,"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/ClassLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static long findNative(@Nullable ClassLoader loader, Class<?> clazz, String entryName, String javaName);",
          "static NativeLibraries nativeLibrariesFor(@Nullable ClassLoader loader);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Double.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/StringCoding.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static int countNonZeroAscii(String s);",
          "public static int countNonZeroAsciiLatin1(byte[] ba, int off, int len);",
          "public static int countNonZeroAsciiUTF16(byte[] ba, int off, int strlen);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Math.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@IntrinsicCandidate"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/Runtime.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Restricted",
          "@Restricted"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/SecurityManager.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class StackWalkerHolder {",
            "methods": []
          }
        ],
        "new_methods": [
          "protected Class<?>[] getClassContext();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/ref/ReferenceQueue.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class Lock {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/ref/Reference.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void clearImpl();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/ref/PhantomReference.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "void clearImpl();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/invoke/MethodType.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static HashMap<MethodType, MethodType> copyInternTable();",
          "static void createArchivedObjects();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/invoke/MethodHandles.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "static int optionsToFlag(ClassOption[] options);",
          "static String validateAndFindInternalName(byte[] bytes, String pkgName);",
          "ClassDefiner makeClassDefiner(String internalName, byte[] bytes, ClassFileDumper dumper);",
          "ClassDefiner makeHiddenClassDefiner(String internalName, byte[] bytes, ClassFileDumper dumper);",
          "ClassDefiner makeHiddenClassDefiner(String internalName, byte[] bytes, ClassFileDumper dumper, int flags);",
          "record ClassDefiner(Lookup lookup, String internalName, byte[] bytes, int classFlags, ClassFileDumper dumper) {",
          "ClassDefiner {",
          "assert ((classFlags & HIDDEN_CLASS) != 0 || (classFlags & STRONG_LOADER_LINK) == STRONG_LOADER_LINK);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/invoke/LambdaForm.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "Name withIndex(int i);",
          "static Name[] invokeArguments(int extra, MethodType types);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/reflect/Constructor.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "Constructor<T> newWithAccessor(ConstructorAccessor accessor);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/lang/reflect/ReflectAccess.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "final class ReflectAccess implements JavaLangReflectAccess {",
            "methods": [
              "public <T> Constructor<T> newConstructorWithAccessor(Constructor<T> original, ConstructorAccessor accessor);"
            ]
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/nio/Buffer.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "abstract int scaleShifts();",
          "abstract AbstractMemorySegmentImpl heapSegment(Object base, long offset, long length, boolean readOnly, MemorySessionImpl bufferScope);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/DecimalFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "final StringBuf format(Object number, StringBuf toAppendTo, FieldPosition pos);",
          "@Override",
          "@Override",
          "StringBuf format(double number, StringBuf result, FieldPosition fieldPosition);",
          "StringBuf format(double number, StringBuf result, FieldDelegate delegate);",
          "boolean handleNaN(double number, StringBuf result, FieldDelegate delegate);",
          "boolean handleInfinity(double number, StringBuf result, FieldDelegate delegate, boolean isNegative);",
          "StringBuf doubleSubformat(double number, StringBuf result, FieldDelegate delegate, boolean isNegative);",
          "StringBuf format(long number, StringBuf result, FieldPosition fieldPosition);",
          "StringBuf format(long number, StringBuf result, FieldDelegate delegate);",
          "StringBuf format(BigDecimal number, StringBuf result, FieldDelegate delegate);",
          "StringBuf format(BigInteger number, StringBuf result, FieldDelegate delegate, boolean formatLong);",
          "DigitList getDigitList();",
          "void subformatNumber(StringBuf result, FieldDelegate delegate, boolean isNegative, boolean isInteger, int maxIntDigits, int minIntDigits, int maxFraDigits, int minFraDigits);",
          "record NumericPosition(int fullPos, int intPos) {",
          "NumericPosition subparseNumber(String text, int position, DigitList digits, boolean checkExponent, boolean isExponent, boolean[] status);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/MessageFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "final StringBuf format(Object arguments, StringBuf result, FieldPosition pos);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/SimpleDateFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "final StringBuf format(Date date, StringBuf toAppendTo, FieldPosition pos);",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/ChoiceFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "StringBuf format(long number, StringBuf toAppendTo, FieldPosition status);",
          "@Override",
          "@Override",
          "StringBuf format(double number, StringBuf toAppendTo, FieldPosition status);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/CharacterIteratorFieldDelegate.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void formatted(Format.Field attr, Object value, int start, int end, Format.StringBuf buffer);",
          "public void formatted(int fieldID, Format.Field attr, Object value, int start, int end, Format.StringBuf buffer);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/DateFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "final StringBuf format(Object obj, StringBuf toAppendTo, FieldPosition fieldPosition);",
          "StringBuf format(Date date, StringBuf toAppendTo, FieldPosition fieldPosition);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/NumberFormat.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "StringBuf format(Object number, StringBuf toAppendTo, FieldPosition pos);",
          "@Override",
          "StringBuf format(double number, StringBuf toAppendTo, FieldPosition pos);",
          "StringBuf format(long number, StringBuf toAppendTo, FieldPosition pos);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/java/text/FieldPosition.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void formatted(Format.Field attr, Object value, int start, int end, Format.StringBuf buffer);",
          "public void formatted(int fieldID, Format.Field attr, Object value, int start, int end, Format.StringBuf buffer);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/com/sun/crypto/provider/DHPrivateKey.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class DHComponents {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.base/share/classes/com/sun/crypto/provider/DHPublicKey.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "private static class DHComponents {",
            "methods": []
          }
        ],
        "new_methods": []
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.net.http/share/classes/jdk/internal/net/http/ConnectionPool.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "void cleanup(HttpConnection c, long pendingData, Throwable error);",
          "@Override",
          "public void dropSubscription();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.rmi/share/classes/java/rmi/server/RMIClassLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static ClassLoader getClassLoader(String codebase) throws MalformedURLException;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/CodeBlob.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isUpcallStub();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "protected static final int LONG_TYPE_PARAM;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriter.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public void addIndirectPackages(Table<?> table, Map<ModuleElement, SortedSet<PackageElement>> ip, Predicate<ModuleElement> acceptModule);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlConfiguration.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "SEARCH_TAGS,"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/TextBuilder.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class TextBuilder extends Content {",
            "methods": [
              "public TextBuilder() {",
              "public TextBuilder(CharSequence initialContent) {",
              "@Override",
              "public TextBuilder add(CharSequence strContent);",
              "@Override",
              "@Pure",
              "public boolean isEmpty();",
              "@Override",
              "public boolean isPhrasingContent();",
              "@Override",
              "public int charCount();",
              "@Override",
              "public String toString();",
              "@Override",
              "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/Text.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Text extends Content {",
            "methods": [
              "public static final Text EMPTY;",
              "public static Text of(CharSequence content);",
              "@Override",
              "@Pure",
              "public boolean isEmpty();",
              "@Override",
              "public boolean isPhrasingContent();",
              "@Override",
              "public int charCount();",
              "static int charCount(CharSequence cs);",
              "@Override",
              "public String toString();",
              "@Override",
              "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;",
              "public static final String NL;",
              "public static CharSequence normalizeNewlines(CharSequence text);",
              "static boolean checkNewlines(CharSequence cs);"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/Comment.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Comment extends Content {",
            "methods": [
              "public Comment(String comment) {",
              "@Override",
              "@Pure",
              "public boolean isEmpty();",
              "@Override",
              "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/HtmlTree.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class HtmlTree extends Content {",
            "methods": [
              "public final HtmlTag tag;",
              "public static HtmlTree of(HtmlTag tag);",
              "public HtmlTree put(HtmlAttr attrName, String attrValue);",
              "public HtmlTree setId(HtmlId id);",
              "public HtmlTree setTitle(Content body);",
              "public HtmlTree setRole(HtmlAttr.Role role);",
              "public HtmlTree setStyle(HtmlStyle style);",
              "public HtmlTree addStyle(HtmlStyle style);",
              "public HtmlTree addStyle(String style);",
              "@Override",
              "public HtmlTree add(Content content);",
              "public HtmlTree addUnchecked(Content content);",
              "@Override",
              "public HtmlTree add(CharSequence stringContent);",
              "public HtmlTree add(List<? extends Content> list);",
              "public Map<HtmlAttr, String> getAttrs();",
              "public List<Content> getContents();",
              "@Override",
              "public <T> HtmlTree addAll(Collection<T> items, Function<T, Content> mapper);",
              "@Override",
              "public int charCount();",
              "public static final BitSet MAIN_CHARS;",
              "public static final BitSet QUERY_FRAGMENT_CHARS;",
              "public static String encodeURL(String url);",
              "public static HtmlTree A(String ref, Content body);",
              "public static HtmlTree A(URI ref, Content body);",
              "public static HtmlTree BODY(HtmlStyle style);",
              "public static HtmlTree BR();",
              "public static HtmlTree BUTTON(HtmlId id);",
              "public static HtmlTree BUTTON(HtmlStyle style);",
              "public static HtmlTree CAPTION(Content body);",
              "public static HtmlTree CODE();",
              "public static HtmlTree CODE(Content body);",
              "public static HtmlTree DD();",
              "public static HtmlTree DD(Content body);",
              "public static HtmlTree DETAILS();",
              "public static HtmlTree DETAILS(HtmlStyle style);",
              "public static HtmlTree DIV(HtmlId id);",
              "public static HtmlTree DIV(HtmlStyle style);",
              "public static HtmlTree DIV(HtmlStyle style, Content body);",
              "public static HtmlTree DIV(Content body);",
              "public static HtmlTree DL(HtmlStyle style);",
              "public static HtmlTree DL(HtmlStyle style, Content body);",
              "public static HtmlTree DT(Content body);",
              "public static HtmlTree EM(String body);",
              "public static HtmlTree FOOTER();",
              "public static HtmlTree HEADER();",
              "public static HtmlTree HEADING(HtmlTag headingTag, Content body);",
              "public static HtmlTree HEADING(HtmlTag headingTag, HtmlStyle style, Content body);",
              "public static HtmlTree HEADING_TITLE(HtmlTag headingTag, HtmlStyle style, Content body);",
              "public static HtmlTree HEADING_TITLE(HtmlTag headingTag, Content body);",
              "public static HtmlTree HR();",
              "public static HtmlTree HTML(String lang, Content head, Content body);",
              "public static HtmlTree INPUT(HtmlAttr.InputType type, HtmlId id);",
              "public static HtmlTree INPUT(HtmlAttr.InputType type, HtmlStyle style);",
              "public static HtmlTree LABEL(String forLabel, Content body);",
              "public static HtmlTree LI();",
              "public static HtmlTree LI(HtmlStyle style);",
              "public static HtmlTree LI(Content body);",
              "public static HtmlTree LI(HtmlStyle style, Content body);",
              "public static HtmlTree LINK(String rel, String type, String href, String title);",
              "public static HtmlTree MAIN();",
              "public static HtmlTree MAIN(Content body);",
              "public static HtmlTree META(String httpEquiv, String content, String charset);",
              "public static HtmlTree META(String name, String content);",
              "public static HtmlTree NAV();",
              "public static HtmlTree NOSCRIPT(Content body);",
              "public static HtmlTree OL(HtmlStyle style);",
              "public static HtmlTree P(Content body);",
              "public static HtmlTree P(HtmlStyle style, Content body);",
              "public static HtmlTree PRE();",
              "public static HtmlTree PRE(HtmlStyle style);",
              "public static HtmlTree PRE(Content body);",
              "public static HtmlTree SCRIPT(String src);",
              "public static HtmlTree SECTION(HtmlStyle style);",
              "public static HtmlTree SECTION(HtmlStyle style, Content body);",
              "public static HtmlTree SMALL(Content body);",
              "public static HtmlTree SPAN(Content body);",
              "public static HtmlTree SPAN(HtmlStyle styleClass);",
              "public static HtmlTree SPAN(HtmlStyle styleClass, Content body);",
              "public static HtmlTree SPAN_ID(HtmlId id, Content body);",
              "public static HtmlTree SPAN(HtmlId id, HtmlStyle style, Content body);",
              "public static HtmlTree SUMMARY(Content body);",
              "public static HtmlTree SUP(HtmlStyle style, Content body);",
              "public static HtmlTree TITLE(String body);",
              "public static HtmlTree UL();",
              "public static HtmlTree UL(HtmlStyle style);",
              "public static HtmlTree UL(HtmlId id, HtmlStyle style);",
              "public static HtmlTree UL(HtmlStyle style, Content first, Content... more);",
              "public static <T> HtmlTree UL(HtmlStyle style, Collection<T> items, Function<T, Content> mapper);",
              "public static HtmlTree WBR();",
              "@Override",
              "@Pure",
              "public boolean isEmpty();",
              "@Override",
              "public boolean isPhrasingContent();",
              "@Pure",
              "public boolean hasContent();",
              "@Pure",
              "public boolean hasAttrs();",
              "@Pure",
              "public boolean hasAttr(HtmlAttr attrName);",
              "@Override",
              "@Pure",
              "public boolean isDiscardable();",
              "@Pure",
              "public boolean isInline();",
              "@Pure",
              "public boolean isVoid();",
              "@Override",
              "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/RawHtml.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class RawHtml extends Content {",
            "methods": [
              "protected final String rawHtmlContent;",
              "public static RawHtml of(CharSequence rawHtml);",
              "public static RawHtml markdown(CharSequence markdownOutput);",
              "public static RawHtml startElement(CharSequence name, Content attrs, boolean selfClosing);",
              "public static RawHtml endElement(CharSequence name);",
              "public static RawHtml comment(String body);",
              "public static RawHtml cdata(String body);",
              "@Pure",
              "@Override",
              "public boolean isEmpty();",
              "@Override",
              "public boolean isPhrasingContent();",
              "@Override",
              "public String toString();",
              "protected static int charCount(CharSequence htmlText);",
              "@Override",
              "public boolean write(Writer out, String newline, boolean atNewline) throws IOException;"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/ContentBuilder.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class ContentBuilder extends Content {",
            "methods": [
              "protected List<Content> contents;",
              "public ContentBuilder() {",
              "public ContentBuilder(Content... contents) {",
              "@Override",
              "public ContentBuilder add(Content content);",
              "@Override",
              "public ContentBuilder add(CharSequence text);",
              "public List<Content> getContents();",
              "@Override",
              "public boolean write(Writer writer, String newline, boolean atNewline) throws IOException;",
              "@Override",
              "@Pure",
              "public boolean isEmpty();",
              "@Override",
              "public int charCount();",
              "@Override",
              "public boolean isPhrasingContent();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/Script.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public class Script {",
            "methods": [
              "public Script() {",
              "public Script(String code) {",
              "public Script append(CharSequence code);",
              "public Script appendStringLiteral(CharSequence text);",
              "public Script appendStringLiteral(CharSequence text, char quoteChar);",
              "public Content asContent();",
              "public static String stringLiteral(CharSequence s);",
              "public static String stringLiteral(CharSequence s, char quoteChar);"
            ]
          },
          {
            "declaration": "private static class ScriptContent extends Content {",
            "methods": [
              "@Override",
              "public ScriptContent add(CharSequence code);",
              "@Override",
              "public boolean write(Writer writer, String newline, boolean atNewline) throws IOException;",
              "@Override",
              "@Pure",
              "public boolean isEmpty();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.javadoc/share/classes/jdk/javadoc/internal/html/Content.java": {
      "new_changes": {
        "new_classes": [
          {
            "declaration": "public abstract class Content {",
            "methods": [
              "@Override",
              "public String toString();",
              "public Content add(Content content);",
              "public Content add(CharSequence stringContent);",
              "public <T> Content addAll(Collection<T> items, Function<T, Content> mapper);",
              "public abstract boolean write(Writer writer, String newline, boolean atNewline) throws IOException;",
              "public abstract boolean isEmpty();",
              "@Pure",
              "public boolean isDiscardable();",
              "public int charCount();",
              "public boolean isPhrasingContent();"
            ]
          }
        ],
        "new_methods": [
          "package jdk.javadoc.internal.html;"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/sun/awt/NativeLibLoader.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"restricted\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/beans/Beans.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"removal\")",
          "public static void setDesignTime(boolean isDesignTime);",
          "public static void setGuiAvailable(boolean isGuiAvailable);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/beans/EventHandler.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"unchecked\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/Window.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Deprecated()",
          "public final void setAlwaysOnTop(boolean alwaysOnTop);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/KeyboardFocusManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static void setCurrentKeyboardFocusManager(KeyboardFocusManager newManager);",
          "protected Component getGlobalFocusOwner();",
          "protected void setGlobalFocusOwner(Component focusOwner);",
          "public void clearGlobalFocusOwner();",
          "protected Component getGlobalPermanentFocusOwner();",
          "protected void setGlobalPermanentFocusOwner(Component permanentFocusOwner);",
          "protected Window getGlobalFocusedWindow();",
          "protected void setGlobalFocusedWindow(Window focusedWindow);",
          "protected Window getGlobalActiveWindow();",
          "protected void setGlobalActiveWindow(Window activeWindow);",
          "protected Container getGlobalCurrentFocusCycleRoot();",
          "public void setGlobalCurrentFocusCycleRoot(Container newFocusCycleRoot);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/EventQueue.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"removal\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/Toolkit.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"restricted\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/SplashScreen.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"restricted\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/image/ColorModel.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"restricted\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/java/awt/font/TextLine.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public Shape getOutline();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/javax/swing/UIManager.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public static void setInstalledLookAndFeels(LookAndFeelInfo[] infos);"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/java.desktop/share/classes/javax/swing/JComponent.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@SuppressWarnings(\"deprecation\")"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotObjectConstantImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "@Override",
          "public boolean isCompressible();"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotCompressedNullConstant.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isCompressible();",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isScoped();",
          "@Override"
        ]
      }
    },
    "https://github.com/eisop/jdk/tree/jdk-24/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/hotspot/HotSpotMetaspaceConstantImpl.java": {
      "new_changes": {
        "new_classes": [],
        "new_methods": [
          "public boolean isCompressible();",
          "@Override"
        ]
      }
    }
  }
}